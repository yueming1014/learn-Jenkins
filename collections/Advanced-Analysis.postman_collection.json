{
	"info": {
		"_postman_id": "633c379d-b588-4ffe-bd14-455f1a612ee7",
		"name": "API 2.1 Advanced Analysis",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1.0 Advanced Analyses-spade",
			"item": [
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_jwt\", data.user.authToken);",
									"postman.setGlobalVariable(\"user_jwt\", data.user.authToken);",
									"postman.setEnvironmentVariable(\"userid\", data.user.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Response body contains authToken\"] = responseBody.has(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\");",
									"if (data.user.id > 2){",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id - 1);",
									"}else{",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id + 1);",
									"}",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"username\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"location\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"organization\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"twitter\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bio\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"hideEmail\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginIp\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"authToken\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        // \"location\",",
									"        // \"organization\",",
									"        // \"bio\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"principalInvestigatorId\",",
									"        \"hideEmail\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"lastLoginAt\",",
									"        \"lastLoginIp\",",
									"        \"authToken\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"user\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "UTF-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"authenticate"
							]
						}
					},
					"response": [
						{
							"name": "authenticate-user.json",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "charset",
										"value": "UTF-8"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
								},
								"url": {
									"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
									"protocol": "https",
									"host": [
										"{{cyto_server}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "758",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 23 May 2016 05:20:43 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"8864d52516a23f4b44bda1b304617730\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31622400; includeSubDomains",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.769000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"user\":{\"id\":110,\"username\":\"swapnil01\",\"location\":\"Mountain View, CA\",\"organization\":\"Cytobank Inc.\",\"twitter\":\"\",\"bio\":\"\",\"firstName\":\"Swapnil01dev01\",\"lastName\":\"Patne01\",\"email\":\"swapnil+1dev01@cytobank.org\",\"principalInvestigatorId\":null,\"hideEmail\":true,\"createdAt\":\"2016-03-29T12:52:21Z\",\"updatedAt\":\"2016-05-23T05:20:43Z\",\"lastLoginAt\":\"2016-05-13T08:58:05Z\",\"lastLoginIp\":\"49.248.212.18\",\"authToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1NTU2YjM1MzE4MGVjYjcyMDMyM2M2OTlkMjRjZWJkMCIsImV4cCI6MTQ2NDAwOTY0MiwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTEwLCJpYXQiOjE0NjM5ODA4NDIsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ2Mzk4MDg0Miwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.cv_PllzIhwqdKdwFVaoG9ME_PrK1y0qdgQ5Q0MXue44\"}}"
						}
					]
				},
				{
					"name": "List Exps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"for (var i =0; i < data.experiments.length; i++){",
									"    if (data.experiments[i].experimentName == environment.SPADE_API_Master){",
									"        postman.setEnvironmentVariable(\"experiment_id\", data.experiments[i].id);",
									"        postman.setEnvironmentVariable(\"exp_version\", data.experiments[i].version);",
									"        break;",
									"    }",
									"}",
									"tests[\"Body contains list of experiments\"] = data.experiments.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments"
							]
						},
						"description": "List All experimetns for the user"
					},
					"response": []
				},
				{
					"name": "Clone Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cloned_exp_id\", data.experiment.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Experiment cloned successfully\"] = data !== \"\" && typeof data.experiment === 'object';",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{experiment_id}}/clone",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{experiment_id}}",
								"clone"
							]
						},
						"description": "Clone Experiment for user, provided user has access to clone it, other wise return informative error."
					},
					"response": []
				},
				{
					"name": "Exp Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}"
							]
						},
						"description": "Show experiemnt details for the exp id sent over request."
					},
					"response": []
				},
				{
					"name": "List FCS Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of fcs files\"] = data.fcsFiles.length >= 1;",
									"for (var i=0;i < data.fcsFiles.length; i++)",
									"{",
									"postman.setEnvironmentVariable(\"fcs_file_id_\"+[i], data.fcsFiles[i].id);",
									"}",
									"// postman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_4\", data.fcsFiles[3].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_5\", data.fcsFiles[4].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_6\", data.fcsFiles[5].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_7\", data.fcsFiles[6].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_8\", data.fcsFiles[7].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_9\", data.fcsFiles[8].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_10\", data.fcsFiles[9].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_11\", data.fcsFiles[10].id);",
									"var all_fcs_file_ids = data.fcsFiles[0].id;",
									"for (var i =1; i < data.fcsFiles.length; i++){",
									"    all_fcs_file_ids = (all_fcs_file_ids +\", \"+ data.fcsFiles[i].id);",
									"}",
									"postman.setEnvironmentVariable(\"all_fcs_file_ids\", all_fcs_file_ids);",
									"for (var i = 0; i < data.fcsFiles.length; i++){",
									"    data.fcsFiles[i].id = null;",
									"    data.fcsFiles[i].experimentId = null;",
									"    data.fcsFiles[i].createdAt = null;",
									"    data.fcsFiles[i].updatedAt = null;",
									"    data.fcsFiles[i].experimentName = null;",
									"}",
									"var respBody = JSON.stringify(data);",
									"if (typeof environment.gold_std_pbmc_fcsFilesDetails_ds === 'undefined' || environment.gold_std_pbmc_fcsFilesDetails_ds === \"\"){",
									"    postman.setEnvironmentVariable(\"gold_std_pbmc_fcsFilesDetails_ds\", respBody);",
									"}",
									"tests[\"Body matches gold standard data\"] = respBody === environment.gold_std_pbmc_fcsFilesDetails_ds;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Populations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"",
									"for (var i =0; i < data.populations.length; i++){",
									"if (data.populations[i].name==environment.population_1){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"else if(data.populations[i].name==environment.population_2){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"}",
									"tests[\"Body contains list of populations\"] = data.populations.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "List Panels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.panels[0].channels.length; i++){",
									"    if (data.panels[0].channels[i].longName.match(\"CD\")){",
									"postman.setEnvironmentVariable(\"panel_id\", data.panels[0].id);",
									"postman.setEnvironmentVariable(\"channel_id_\"+count, data.panels[0].channels[i].normalizedShortNameId);",
									"count++;",
									"//postman.setEnvironmentVariable(\"channel_id_2\", data.panels[0].channels[i].normalizedShortNameId);",
									"    }",
									"}",
									"tests[\"Body contains panels\"] = data.panels.length >= 1;",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"panels\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"channels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"longName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"normalizedShortNameId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"fcsFileChannelIndex\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"shortName\",",
									"                \"longName\",",
									"                \"normalizedShortNameId\",",
									"                \"fcsFileChannelIndex\"",
									"              ]",
									"            }",
									"          },",
									"          \"fcsFiles\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"panelChannelMappings\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"uniqueChannelOrders\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"shortName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"longName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"normalizedShortNameId\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"fcsFileChannelIndex\": {",
									"                        \"type\": \"integer\"",
									"                      }",
									"                    },",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"shortName\",",
									"                      \"longName\",",
									"                      \"normalizedShortNameId\",",
									"                      \"fcsFileChannelIndex\"",
									"                    ]",
									"                  }",
									"                }",
									"              },",
									"              \"fcsFileToChannelsMap\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {}",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"uniqueChannelOrders\",",
									"              \"fcsFileToChannelsMap\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"channels\",",
									"          \"fcsFiles\",",
									"          \"panelChannelMappings\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"panels\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate panels schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Compensations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"compensation_id\", data.compensations[0].id);",
									"",
									"",
									"// gold standard for compensations?",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"compensations\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sources\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"detectors\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"compensationMatrix\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"number\"",
									"              }",
									"            }",
									"          },",
									"          \"experimentId\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"creationMethodType\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"sources\",",
									"          \"detectors\",",
									"          \"compensationMatrix\",",
									"          \"experimentId\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"creationMethodType\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"compensations\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate compensations schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/compensations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"compensations"
							]
						},
						"description": "List all compensations for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "create SPADE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"spade_id\", data.spade.id);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var schema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"spade\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"targetNumberOfNodes\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"compensation\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"population\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"downSampledEventsTarget\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"percent\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"percent\"",
									"              ]",
									"            },",
									"            \"foldChangeGroups\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                  \"name\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"fcsFiles\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"id\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        \"baseline\": {",
									"                          \"type\": \"boolean\"",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"id\",",
									"                        \"name\",",
									"                        \"baseline\"",
									"                      ]",
									"                    }",
									"                  }",
									"                },",
									"                \"required\": [",
									"                  \"name\",",
									"                  \"fcsFiles\"",
									"                ]",
									"              }",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"targetNumberOfNodes\",",
									"            \"compensation\",",
									"            \"clusteringChannels\",",
									"            \"population\",",
									"            \"downSampledEventsTarget\",",
									"            \"foldChangeGroups\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"author\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"settings\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"spade\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\":  \"new spade task\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								""
							]
						},
						"description": "Create a new spade task with default settings.\n\nSuccessful result:\n\n    \"spade\": {\n            \"createdAt\": \"2016-08-11T19:11:59Z\",\n            \"createdExperiment\": 947,\n            \"id\": 122,\n            \"name\": \"new spade task\",\n            \"settings\": {\n                \"clusteringChannels\": [],\n                \"compensation\": -2,\n                \"downSampledEventsTarget\": {\n                    \"percent\": 10\n                },\n                \"foldChangeGroups\": [\n                    {\n                        \"fcsFiles\": [\n                            {\n                                \"baseline\": false,\n                                \"id\": 1804,\n                                \"name\": \"pbmc_lrs005_il10.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1805,\n                                \"name\": \"pbmc_lrs005_il6.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1806,\n                                \"name\": \"pbmc_lrs005_lps.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1807,\n                                \"name\": \"pbmc_lrs005_unstim1.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1808,\n                                \"name\": \"pbmc_lrs005_unstim2.fcs\"\n                            }\n                        ],\n                        \"name\": \"Group 1\"\n                    }\n                ],\n                \"population\": 0,\n                \"targetNumberOfNodes\": 200\n            },\n            \"sourceExperiment\": 331,\n            \"status\": \"New\",\n            \"updatedAt\": \"2016-08-11T19:11:59Z\"\n        }"
					},
					"response": []
				},
				{
					"name": "create SPADE w/o token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Not Authenticated -- invalid or missing auth token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\":  \"new spade task\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								""
							]
						},
						"description": "Create a new spade task with default settings.\n\nSuccessful result:\n\n    \"spade\": {\n            \"createdAt\": \"2016-08-11T19:11:59Z\",\n            \"createdExperiment\": 947,\n            \"id\": 122,\n            \"name\": \"new spade task\",\n            \"settings\": {\n                \"clusteringChannels\": [],\n                \"compensation\": -2,\n                \"downSampledEventsTarget\": {\n                    \"percent\": 10\n                },\n                \"foldChangeGroups\": [\n                    {\n                        \"fcsFiles\": [\n                            {\n                                \"baseline\": false,\n                                \"id\": 1804,\n                                \"name\": \"pbmc_lrs005_il10.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1805,\n                                \"name\": \"pbmc_lrs005_il6.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1806,\n                                \"name\": \"pbmc_lrs005_lps.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1807,\n                                \"name\": \"pbmc_lrs005_unstim1.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1808,\n                                \"name\": \"pbmc_lrs005_unstim2.fcs\"\n                            }\n                        ],\n                        \"name\": \"Group 1\"\n                    }\n                ],\n                \"population\": 0,\n                \"targetNumberOfNodes\": 200\n            },\n            \"sourceExperiment\": 331,\n            \"status\": \"New\",\n            \"updatedAt\": \"2016-08-11T19:11:59Z\"\n        }"
					},
					"response": []
				},
				{
					"name": "create SPADE with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 419\"] = responseCode.code === 419;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIwNGIxYTIwMWY1MzJkZjIyMzY4MTlkZDY1OTBkNjVkOSIsImV4cCI6MTQ3NjEyOTcxMSwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTE2LCJpYXQiOjE0NzYxMDA5MTEsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ3NjEwMDkxMSwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.50u-kT96glIXh6aCAp1VVHqOxZR1lWJwqv9IKOPBk7c"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\":  \"new spade task\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								""
							]
						},
						"description": "Create a new spade task with default settings.\n\nSuccessful result:\n\n    \"spade\": {\n            \"createdAt\": \"2016-08-11T19:11:59Z\",\n            \"createdExperiment\": 947,\n            \"id\": 122,\n            \"name\": \"new spade task\",\n            \"settings\": {\n                \"clusteringChannels\": [],\n                \"compensation\": -2,\n                \"downSampledEventsTarget\": {\n                    \"percent\": 10\n                },\n                \"foldChangeGroups\": [\n                    {\n                        \"fcsFiles\": [\n                            {\n                                \"baseline\": false,\n                                \"id\": 1804,\n                                \"name\": \"pbmc_lrs005_il10.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1805,\n                                \"name\": \"pbmc_lrs005_il6.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1806,\n                                \"name\": \"pbmc_lrs005_lps.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1807,\n                                \"name\": \"pbmc_lrs005_unstim1.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1808,\n                                \"name\": \"pbmc_lrs005_unstim2.fcs\"\n                            }\n                        ],\n                        \"name\": \"Group 1\"\n                    }\n                ],\n                \"population\": 0,\n                \"targetNumberOfNodes\": 200\n            },\n            \"sourceExperiment\": 331,\n            \"status\": \"New\",\n            \"updatedAt\": \"2016-08-11T19:11:59Z\"\n        }"
					},
					"response": []
				},
				{
					"name": "create SPADE with blank body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Failed to create SPADE analysis -- (param is missing or the value is empty: spade)\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								""
							]
						},
						"description": "Create a new spade task with default settings.\n\nSuccessful result:\n\n    \"spade\": {\n            \"createdAt\": \"2016-08-11T19:11:59Z\",\n            \"createdExperiment\": 947,\n            \"id\": 122,\n            \"name\": \"new spade task\",\n            \"settings\": {\n                \"clusteringChannels\": [],\n                \"compensation\": -2,\n                \"downSampledEventsTarget\": {\n                    \"percent\": 10\n                },\n                \"foldChangeGroups\": [\n                    {\n                        \"fcsFiles\": [\n                            {\n                                \"baseline\": false,\n                                \"id\": 1804,\n                                \"name\": \"pbmc_lrs005_il10.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1805,\n                                \"name\": \"pbmc_lrs005_il6.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1806,\n                                \"name\": \"pbmc_lrs005_lps.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1807,\n                                \"name\": \"pbmc_lrs005_unstim1.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1808,\n                                \"name\": \"pbmc_lrs005_unstim2.fcs\"\n                            }\n                        ],\n                        \"name\": \"Group 1\"\n                    }\n                ],\n                \"population\": 0,\n                \"targetNumberOfNodes\": 200\n            },\n            \"sourceExperiment\": 331,\n            \"status\": \"New\",\n            \"updatedAt\": \"2016-08-11T19:11:59Z\"\n        }"
					},
					"response": []
				},
				{
					"name": "list_SPADE_runs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"spade\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"status\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"author\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sourceExperiment\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdExperiment\": {",
									"            \"type\": \"null\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"status\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"author\",",
									"          \"sourceExperiment\",",
									"          \"createdExperiment\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"spade\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade"
							]
						},
						"description": "List spade tasks for an experiment.\n\nSuccessful result:\n\n    {\n        \"spade\": [\n            {\n                \"createdAt\": \"2015-03-09T19:51:25Z\",\n                \"createdExperiment\": 332,\n                \"id\": 68,\n                \"name\": \"spade_run\",\n                \"sourceExperiment\": 331,\n                \"status\": \"Completed\",\n                \"updatedAt\": \"2016-08-05T12:11:09Z\"\n            },\n            {\n                \"createdAt\": \"2016-06-15T18:21:53Z\",\n                \"createdExperiment\": 807,\n                \"id\": 99,\n                \"name\": \"test\",\n                \"sourceExperiment\": 331,\n                \"status\": \"Failed\",\n                \"updatedAt\": \"2016-06-27T23:04:19Z\"\n            },\n            {\n                \"createdAt\": \"2016-06-27T23:12:55Z\",\n                \"createdExperiment\": 879,\n                \"id\": 104,\n                \"name\": \"test2\",\n                \"sourceExperiment\": 331,\n                \"status\": \"Failed\",\n                \"updatedAt\": \"2016-06-27T23:16:27Z\"\n            }\n        ]\n    }\n"
					},
					"response": []
				},
				{
					"name": "show SPADE details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"spade\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"targetNumberOfNodes\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"compensation\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"population\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"downSampledEventsTarget\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"percent\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"percent\"",
									"              ]",
									"            },",
									"            \"foldChangeGroups\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                  \"name\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"fcsFiles\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"id\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        \"baseline\": {",
									"                          \"type\": \"boolean\"",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"id\",",
									"                        \"name\",",
									"                        \"baseline\"",
									"                      ]",
									"                    }",
									"                  }",
									"                },",
									"                \"required\": [",
									"                  \"name\",",
									"                  \"fcsFiles\"",
									"                ]",
									"              }",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"targetNumberOfNodes\",",
									"            \"compensation\",",
									"            \"clusteringChannels\",",
									"            \"population\",",
									"            \"downSampledEventsTarget\",",
									"            \"foldChangeGroups\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"author\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"settings\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"spade\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}?include_settings=1",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}"
							],
							"query": [
								{
									"key": "include_settings",
									"value": "1"
								}
							]
						},
						"description": "Show a specific spade task for an experiment.\n\nSuccessful result:\n\n    {\n        \"spade\": {\n            \"createdAt\": \"2015-03-09T19:51:25Z\",\n            \"createdExperiment\": 332,\n            \"id\": 68,\n            \"name\": \"spade_run\",\n            \"settings\": {\n                \"clusteringChannels\": [\n                    54,\n                    56,\n                    57,\n                    61\n                ],\n                \"compensation\": -2,\n                \"downSampledEventsTarget\": {\n                    \"percent\": 10\n                },\n                \"foldChangeGroups\": [\n                    {\n                        \"fcsFiles\": [\n                            {\n                                \"baseline\": false,\n                                \"id\": 1804,\n                                \"name\": \"pbmc_lrs005_il10.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1805,\n                                \"name\": \"pbmc_lrs005_il6.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1806,\n                                \"name\": \"pbmc_lrs005_lps.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1807,\n                                \"name\": \"pbmc_lrs005_unstim1.fcs\"\n                            },\n                            {\n                                \"baseline\": false,\n                                \"id\": 1808,\n                                \"name\": \"pbmc_lrs005_unstim2.fcs\"\n                            }\n                        ],\n                        \"name\": \"Group 1\"\n                    }\n                ],\n                \"population\": 0,\n                \"targetNumberOfNodes\": 200\n            },\n            \"sourceExperiment\": 331,\n            \"status\": \"Completed\",\n            \"updatedAt\": \"2016-08-05T12:11:09Z\"\n        }\n    }\n\n"
					},
					"response": []
				},
				{
					"name": "update SPADE w/o channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": -1,\n    \"targetNumberOfNodes\": 100,\n    \"population\": [],\n    \"clusteringChannels\": [],\n    \"downSampledEventsTarget\": {\n      \"percent\": 10\n      \n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n        ]\n      }\n      \n        \n      \n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "run SPADE w/o channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"No Clustering channels are defined\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"run"
							]
						},
						"description": "Initiate a new spade task in the background. It is a non-blocking asynchronous call which on success returns with a http status code 202(accepted). Client can retreive task status by issuing 'status' end point\n\nSuccessful result:\n\n    {\n        \"spadeStatus\": {\n            \"endTime\": 0,\n            \"id\": 123,\n            \"name\": \"my spade task\",\n            \"progress\": 0,\n            \"progressMessage\": \"Pending\",\n            \"runtime\": 0,\n            \"startTime\": 0,\n            \"status\": \"Pending\"\n        }\n    }"
					},
					"response": []
				},
				{
					"name": "update SPADE settings(invalid no of nodes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Invalid targetNumberOfNodes\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": -2,\n    \"targetNumberOfNodes\": 0,\n    \"population\": {{population_id_1}},\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n      \"percent\": 20\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update (All FCS + Comp files)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"foldFileGroups fcsFiles has invalid or non-experimental ids\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 100,\n    \"population\": 4,\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}],\n    \"downSampledEventsTarget\": {\n    \"percent\": 10\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n        {\n            \"id\": {{fcs_file_id_3}},\n            \"baseline\": true\n\n          },\n          {\n            \"id\": {{fcs_file_id_4}},\n            \"baseline\": true\n          }\n        ]\n      },\n      {\n        \"name\": \"Group Green\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_5}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_6}},\n            \"baseline\": false\n          },\n          {\n            \"id\": {{fcs_file_id_7}},\n            \"baseline\": false\n          },\n          {\n            \"id\": {{fcs_file_id_8}},\n            \"baseline\": false\n          },\n          {\n            \"id\": {{fcs_file_id_9}},\n            \"baseline\": false\n          },\n          {\n            \"id\": {{fcs_file_id_10}},\n            \"baseline\": false\n          }\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update SPADE settings(W/O any group)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 100,\n    \"population\": {{population_id_1}},\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n      \"percent\": 20\n    }\n      }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update SPADE settings (multiple populations)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": -1,\n    \"targetNumberOfNodes\": 100,\n    \"population\": [14,1],\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n      \"percent\": 10\n      \n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n        ]\n      }\n      \n        \n      \n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update settings(Empty Group)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"foldFileGroups fcsFiles has missing ids\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 100,\n    \"population\": 4,\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}],\n    \"downSampledEventsTarget\": {\n    \"percent\": 10\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}},\n            \"baseline\": true\n\n          },\n          {\n            \"id\": {{fcs_file_id_2}},\n            \"baseline\": true\n          }\n        ]\n      },\n      {\n        \"name\": \"Group Green\",\n        \"fcsFiles\": [\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update settings(Multiple Groups) with duplicate files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"foldChangeGroups has duplicate fcsfiles entries\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 100,\n    \"population\": 4,\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}],\n    \"downSampledEventsTarget\": {\n    \"percent\": 10\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}},\n            \"baseline\": true\n\n          },\n          {\n            \"id\": {{fcs_file_id_2}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_3}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_4}},\n            \"baseline\": true\n          }\n        ]\n      },\n      {\n        \"name\": \"Group Green\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_1}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_2}},\n            \"baseline\": false\n          }\n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update SPADE with all settings(invalid percent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Body matches string\"] = responseBody.has(\"Invalid downSampledEventsTarget percent\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 200,\n    \"population\": {{population_id_1}},\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n      \"percent\": -1\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update settings(two groups with same name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"foldChangeGroups has duplicate group names\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 100,\n    \"population\": 4,\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}],\n    \"downSampledEventsTarget\": {\n    \"percent\": 10\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}},\n            \"baseline\": true\n\n          },\n          {\n            \"id\": {{fcs_file_id_2}},\n            \"baseline\": true\n          }\n        ]\n      },\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_3}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_4}},\n            \"baseline\": false\n          }\n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update settings(Multiple Groups)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 100,\n    \"population\": 4,\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}],\n    \"downSampledEventsTarget\": {\n    \"percent\": 10\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}},\n            \"baseline\": true\n\n          },\n          {\n            \"id\": {{fcs_file_id_2}},\n            \"baseline\": true\n          }\n        ]\n      },\n      {\n        \"name\": \"Group Green\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_3}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_4}},\n            \"baseline\": false\n          }\n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update SPADE with all settings(invalid absoluteNumber)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Body matches string\"] = responseBody.has(\"Invalid downSampledEventsTarget absoluteNumber\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 200,\n    \"population\": {{population_id_1}},\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n      \"absoluteNumber\": 0\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update SPADE with all settings(absoluteNumber)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 50,\n    \"population\": {{population_id_1}},\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n      \"absoluteNumber\": 100\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "update SPADE with all settings(percent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 200,\n    \"population\": {{population_id_1}},\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n    \"percent\": 20\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "run SPADE with all settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"run"
							]
						},
						"description": "Initiate a new spade task in the background. It is a non-blocking asynchronous call which on success returns with a http status code 202(accepted). Client can retreive task status by issuing 'status' end point\n\nSuccessful result:\n\n    {\n        \"spadeStatus\": {\n            \"endTime\": 0,\n            \"id\": 123,\n            \"name\": \"my spade task\",\n            \"progress\": 0,\n            \"progressMessage\": \"Pending\",\n            \"runtime\": 0,\n            \"startTime\": 0,\n            \"status\": \"Pending\"\n        }\n    }"
					},
					"response": []
				},
				{
					"name": "update SPADE run in pending/running status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Could not update parameters\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n    \"name\": \"spade_update_test\",\n    \"compensationId\": {{compensation_id}},\n    \"targetNumberOfNodes\": 200,\n    \"population\": {{population_id_1}},\n    \"clusteringChannels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"downSampledEventsTarget\": {\n    \"percent\": 20\n    },\n    \"foldChangeGroups\": [\n      {\n        \"name\": \"Group Red\",\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_0}},\n            \"baseline\": true\n          },\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n           \"id\": {{fcs_file_id_2}}\n          },\n          {\n           \"id\": {{fcs_file_id_3}}\n          },\n          {\n           \"id\": {{fcs_file_id_4}}\n          }\n          \n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								""
							]
						},
						"description": "Update settings for a spade task.\n\nSuccessful result:"
					},
					"response": []
				},
				{
					"name": "status_of_SPADE_run",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*var data = postman.setNextRequest(\"list_SPADE_runs\");",
									"console.log(data);*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"function sleep(milliseconds) {",
									"  var start = new Date().getTime();",
									"  for (var i = 0; i < 1e7; i++) {",
									"    if ((new Date().getTime() - start) > milliseconds) {",
									"      break;",
									"    }",
									"  }",
									"}",
									"//we can also use setInterval() method.",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.spadeStatus.status !== \"Completed\") {",
									"  sleep(2000);",
									"  postman.setNextRequest(\"status_of_SPADE_run\");",
									"  console.log(\"Will run 'status_of_SPADE_run' once again and current status is: \"+data.spadeStatus.status);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"status"
							]
						},
						"description": "Show spade task current status.\n\nSuccessful result output:\n\n    {\n        \"spadeStatus\": {\n            \"endTime\": \"2015-03-09T19:54:25Z\",\n            \"id\": 68,\n            \"name\": \"spade_run\",\n            \"progress\": 100,\n            \"progressMessage\": \"done\",\n            \"runtime\": 180,\n            \"startTime\": \"2015-03-09T19:51:25Z\",\n            \"status\": \"Completed\"\n        }\n    }"
					},
					"response": []
				},
				{
					"name": "copy_analysis_settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/copy_settings",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"copy_settings"
							]
						},
						"description": "Create a new spade task by coping spade settings from another spade task.\n\nSuccessful result:\n\n    \"spade\": {\n        \"createdAt\": \"2016-08-11T19:22:25Z\",\n        \"createdExperiment\": 948,\n        \"id\": 123,\n        \"name\": \"Copy of spade_run\",\n        \"sourceExperiment\": 331,\n        \"status\": \"New\",\n        \"updatedAt\": \"2016-08-11T19:22:25Z\"\n    }"
					},
					"response": []
				},
				{
					"name": "rename SPADE (blank name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422204\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"//tests[\"Body matches string\"] = responseBody.has(\"Missing Parameters: [name]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n      \"name\": \"\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"rename"
							]
						},
						"description": "Rename an existing spade run.\n\nSuccessful result:\n\n    {\n        \"name\": \"foooname\"\n    }"
					},
					"response": []
				},
				{
					"name": "rename SPADE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"spade\":\n  {\n      \"name\": \"new_spade_name_1\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"rename"
							]
						},
						"description": "Rename an existing spade run.\n\nSuccessful result:\n\n    {\n        \"name\": \"foooname\"\n    }"
					},
					"response": []
				},
				{
					"name": "Copy analysis results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/copy_results",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"copy_results"
							]
						},
						"description": "Copy results to a new experiment"
					},
					"response": []
				},
				{
					"name": "download gml",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/download?item=gml",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"download"
							],
							"query": [
								{
									"key": "item",
									"value": "gml"
								}
							]
						},
						"description": "download results for a successful spade run\n\ndownload items can be one of the following\n\n    gml\n    global_boundarie\n    clusters_table\n    layout_table\n    statistics_table"
					},
					"response": []
				},
				{
					"name": "download spade full data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/download?item=full_data",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"download"
							],
							"query": [
								{
									"key": "item",
									"value": "full_data"
								}
							]
						},
						"description": "download results for a successful spade run\n\ndownload items can be one of the following\n\n    gml\n    global_boundarie\n    clusters_table\n    layout_table\n    statistics_table"
					},
					"response": []
				},
				{
					"name": "download global boundaries table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/download?item=global_boundaries_table",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"download"
							],
							"query": [
								{
									"key": "item",
									"value": "global_boundaries_table"
								}
							]
						},
						"description": "download results for a successful spade run\n\ndownload items can be one of the following\n\n    gml\n    global_boundarie\n    clusters_table\n    layout_table\n    statistics_table"
					},
					"response": []
				},
				{
					"name": "download clusters table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/download?item=clusters_table",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"download"
							],
							"query": [
								{
									"key": "item",
									"value": "clusters_table"
								}
							]
						},
						"description": "download results for a successful spade run\n\ndownload items can be one of the following\n\n    gml\n    global_boundarie\n    clusters_table\n    layout_table\n    statistics_table"
					},
					"response": []
				},
				{
					"name": "download layout table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/download?item=layout_table",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"download"
							],
							"query": [
								{
									"key": "item",
									"value": "layout_table"
								}
							]
						},
						"description": "download results for a successful spade run\n\ndownload items can be one of the following\n\n    gml\n    global_boundarie\n    clusters_table\n    layout_table\n    statistics_table"
					},
					"response": []
				},
				{
					"name": "download statistics table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/download?item=statistics_table",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"download"
							],
							"query": [
								{
									"key": "item",
									"value": "statistics_table"
								}
							]
						},
						"description": "download results for a successful spade run\n\ndownload items can be one of the following\n\n    gml\n    global_boundarie\n    clusters_table\n    layout_table\n    statistics_table"
					},
					"response": []
				},
				{
					"name": "add bubbles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"spade\": {\n        \"bubbles\": [\n            {\n                \"name\": \"red\",\n                \"nodes\": [\n                    101,\n                    105,\n                    108,\n                    117,\n                    118,\n                    131,\n                    133\n                ]\n            },\n            {\n                \"name\": \"green\",\n                \"nodes\": [\n                    110,\n                    111,\n                    121,\n                    124,\n                    125,\n                    128,\n                    134,\n                    140,\n                    141,\n                    155,\n                    161\n                ]\n            },\n            {\n                \"name\": \"blue\",\n                \"nodes\": [\n                    10,\n                    107,\n                    19,\n                    193,\n                    39\n                ]\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/set_bubbles",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"set_bubbles"
							]
						},
						"description": "Add bubbles to a spade task.\n\nSuccessful result:\n\n    {\n        \"spade\": {\n            \"bubbles\": [\n                {\n                    \"name\": \"red\",\n                    \"nodes\": [\n                        101,\n                        105,\n                        108,\n                        117,\n                        118,\n                        131,\n                        133\n                    ]\n                },\n                {\n                    \"name\": \"green\",\n                    \"nodes\": [\n                        110,\n                        111,\n                        121,\n                        124,\n                        125,\n                        128,\n                        134,\n                        140,\n                        141,\n                        155,\n                        161\n                    ]\n                },\n                {\n                    \"name\": \"blue\",\n                    \"nodes\": [\n                        10,\n                        107,\n                        19,\n                        193,\n                        39\n                    ]\n                }\n            ]\n        }\n    }"
					},
					"response": []
				},
				{
					"name": "show  bubbles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/show_bubbles",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"show_bubbles"
							]
						},
						"description": "Show current bubbles and nodes for a spade run\n\nSuccessful result:\n\n    {\n        \"spade\": {\n            \"bubbles\": [\n                {\n                    \"name\": \"example bubble\",\n                    \"nodes\": [\n                        101,\n                        105,\n                        108,\n                        117,\n                        118,\n                        131,\n                        133,\n                        14,\n                        157,\n                    ]\n                },\n                {\n                    \"name\": \"new bubble\",\n                    \"nodes\": [\n                        1,\n                        102,\n                        104,\n                        114,\n                        116,\n                        129,\n                        13,\n                        130,\n                        138,\n                        142,\n                        147,\n                        15,\n                        152,\n                        153,\n                        156,\n                        159,\n                        165,\n                        166\n                    ]\n                }\n            ]\n        }\n    }            "
					},
					"response": []
				},
				{
					"name": "Export bubbles",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n\"spade\":\r\n{\r\n  \"bubbles\": [\"red\", \"green\"] }\r\n\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}/export_bubbles_to_new_experiment",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}",
								"export_bubbles_to_new_experiment"
							]
						},
						"description": "Export bubbles to a new experiment"
					},
					"response": []
				},
				{
					"name": "delete SPADE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/spade/{{spade_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"spade",
								"{{spade_id}}"
							]
						},
						"description": "Delete a non-running spade task. \n\nSuccessful result:\n\nhttp status code - 204(No Content) "
					},
					"response": []
				},
				{
					"name": "Trash Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Experiment trashed successfully\"] = data !== \"\" && typeof data.experiment === 'object';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"experiment\":\n  {\n    \"deleted\":  true\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}"
							]
						},
						"description": "Mark the experiment deleted and move it to the trash."
					},
					"response": []
				}
			]
		},
		{
			"name": "2.0 Advanced Analyses-visne",
			"item": [
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_jwt\", data.user.authToken);",
									"postman.setGlobalVariable(\"user_jwt\", data.user.authToken);",
									"postman.setEnvironmentVariable(\"userid\", data.user.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Response body contains authToken\"] = responseBody.has(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\");",
									"if (data.user.id > 2){",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id - 1);",
									"}else{",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id + 1);",
									"}",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"username\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"location\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"organization\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bio\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"hideEmail\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginIp\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"authToken\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        // \"location\",",
									"        // \"organization\",",
									"        // \"bio\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"principalInvestigatorId\",",
									"        \"hideEmail\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"lastLoginAt\",",
									"        \"lastLoginIp\",",
									"        \"authToken\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"user\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"//console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "UTF-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"authenticate"
							]
						}
					},
					"response": [
						{
							"name": "authenticate-user.json",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "charset",
										"value": "UTF-8"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
								},
								"url": {
									"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
									"protocol": "https",
									"host": [
										"{{cyto_server}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "758",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 23 May 2016 05:20:43 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"8864d52516a23f4b44bda1b304617730\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31622400; includeSubDomains",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.769000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"user\":{\"id\":110,\"username\":\"swapnil01\",\"location\":\"Mountain View, CA\",\"organization\":\"Cytobank Inc.\",\"twitter\":\"\",\"bio\":\"\",\"firstName\":\"Swapnil01dev01\",\"lastName\":\"Patne01\",\"email\":\"swapnil+1dev01@cytobank.org\",\"principalInvestigatorId\":null,\"hideEmail\":true,\"createdAt\":\"2016-03-29T12:52:21Z\",\"updatedAt\":\"2016-05-23T05:20:43Z\",\"lastLoginAt\":\"2016-05-13T08:58:05Z\",\"lastLoginIp\":\"49.248.212.18\",\"authToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1NTU2YjM1MzE4MGVjYjcyMDMyM2M2OTlkMjRjZWJkMCIsImV4cCI6MTQ2NDAwOTY0MiwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTEwLCJpYXQiOjE0NjM5ODA4NDIsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ2Mzk4MDg0Miwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.cv_PllzIhwqdKdwFVaoG9ME_PrK1y0qdgQ5Q0MXue44\"}}"
						}
					]
				},
				{
					"name": "List Exps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"for (var i =0; i < data.experiments.length; i++){",
									"    if (data.experiments[i].experimentName == environment.API_MASTER_EXP){",
									"        postman.setEnvironmentVariable(\"experiment_id\", data.experiments[i].id);",
									"        postman.setEnvironmentVariable(\"exp_version\", data.experiments[i].version);",
									"        break;",
									"    }",
									"}",
									"tests[\"Body contains list of experiments\"] = data.experiments.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments"
							]
						},
						"description": "List All experimetns for the user"
					},
					"response": []
				},
				{
					"name": "Clone Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cloned_exp_id\", data.experiment.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Experiment cloned successfully\"] = data !== \"\" && typeof data.experiment === 'object';",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"experiment\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"version\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"purpose\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"comments\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"public\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"deleted\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"sources\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"experimentName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"gateVersion\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"primaryResearcherId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"uploaderId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"projectId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"clonedFrom\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdFrom\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"childType\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdFromUrl\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"publishedReportId\": {",
									"          \"type\": \"null\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"version\",",
									"        \"purpose\",",
									"        \"comments\",",
									"        \"public\",",
									"        \"deleted\",",
									"        \"sources\",",
									"        \"experimentName\",",
									"        \"gateVersion\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"primaryResearcherId\",",
									"        \"principalInvestigatorId\",",
									"        \"uploaderId\",",
									"        \"projectId\",",
									"        \"clonedFrom\",",
									"        \"createdFrom\",",
									"        \"childType\",",
									"        \"createdFromUrl\",",
									"        \"publishedReportId\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"experiment\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{experiment_id}}/clone",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{experiment_id}}",
								"clone"
							]
						},
						"description": "Clone Experiment for user, provided user has access to clone it, other wise return informative error."
					},
					"response": []
				},
				{
					"name": "Exp Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"experiment\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"version\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"purpose\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"comments\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"public\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"deleted\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"sources\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"experimentName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"gateVersion\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"primaryResearcherId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"uploaderId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"projectId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"clonedFrom\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdFrom\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"childType\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdFromUrl\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"publishedReportId\": {",
									"          \"type\": \"null\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"version\",",
									"        \"purpose\",",
									"        \"comments\",",
									"        \"public\",",
									"        \"deleted\",",
									"        \"sources\",",
									"        \"experimentName\",",
									"        \"gateVersion\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"primaryResearcherId\",",
									"        \"principalInvestigatorId\",",
									"        \"uploaderId\",",
									"        \"projectId\",",
									"        \"clonedFrom\",",
									"        \"createdFrom\",",
									"        \"childType\",",
									"        \"createdFromUrl\",",
									"        \"publishedReportId\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"experiment\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}"
							]
						},
						"description": "Show experiemnt details for the exp id sent over request."
					},
					"response": []
				},
				{
					"name": "List FCS Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of fcs files\"] = data.fcsFiles.length >= 1;",
									"for (var i=0;i < data.fcsFiles.length; i++)",
									"{",
									"postman.setEnvironmentVariable(\"fcs_file_id_\"+[i], data.fcsFiles[i].id);",
									"}",
									"",
									"// postman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_4\", data.fcsFiles[3].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_5\", data.fcsFiles[4].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_6\", data.fcsFiles[5].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_7\", data.fcsFiles[6].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_8\", data.fcsFiles[7].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_9\", data.fcsFiles[8].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_10\", data.fcsFiles[9].id);",
									"// ostman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_4\", data.fcsFiles[3].id);",
									"// postmanmentVariable(\"fcs_file_id_11\", data.fcsFiles[10].id);",
									"var all_fcs_file_ids = data.fcsFiles[0].id;",
									"for (var i =1; i < data.fcsFiles.length; i++){",
									"    all_fcs_file_ids = (all_fcs_file_ids +\", \"+ data.fcsFiles[i].id);",
									"}",
									"postman.setEnvironmentVariable(\"all_fcs_file_ids\", all_fcs_file_ids);",
									"for (var i = 0; i < data.fcsFiles.length; i++){",
									"    data.fcsFiles[i].id = null;",
									"    data.fcsFiles[i].experimentId = null;",
									"    data.fcsFiles[i].createdAt = null;",
									"    data.fcsFiles[i].updatedAt = null;",
									"    data.fcsFiles[i].experimentName = null;",
									"}",
									"var respBody = JSON.stringify(data);",
									"if (typeof environment.gold_std_pbmc_fcsFilesDetails_ds === 'undefined' || environment.gold_std_pbmc_fcsFilesDetails_ds === \"\"){",
									"    postman.setEnvironmentVariable(\"gold_std_pbmc_fcsFilesDetails_ds\", respBody);",
									"}",
									"// tests[\"Body matches gold standard data\"] = respBody === environment.gold_std_pbmc_fcsFilesDetails_ds;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Populations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"",
									"for (var i =0; i < data.populations.length; i++){",
									"if (data.populations[i].name==environment.population_1){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"else if(data.populations[i].name==environment.population_2){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"}",
									"tests[\"Body contains list of populations\"] = data.populations.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "List Panels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.panels[0].channels.length; i++){",
									"    if (data.panels[0].channels[i].longName.match(\"CD\")){",
									"postman.setEnvironmentVariable(\"panel_id\", data.panels[0].id);",
									"postman.setEnvironmentVariable(\"channel_id_\"+count, data.panels[0].channels[i].normalizedShortNameId);",
									"count++;",
									"//postman.setEnvironmentVariable(\"channel_id_2\", data.panels[0].channels[i].normalizedShortNameId);",
									"    }",
									"}",
									"tests[\"Body contains panels\"] = data.panels.length >= 1;",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"panels\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"channels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"longName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"normalizedShortNameId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"fcsFileChannelIndex\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"shortName\",",
									"                \"longName\",",
									"                \"normalizedShortNameId\",",
									"                \"fcsFileChannelIndex\"",
									"              ]",
									"            }",
									"          },",
									"          \"fcsFiles\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"panelChannelMappings\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"uniqueChannelOrders\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"shortName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"longName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"normalizedShortNameId\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"fcsFileChannelIndex\": {",
									"                        \"type\": \"integer\"",
									"                      }",
									"                    },",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"shortName\",",
									"                      \"longName\",",
									"                      \"normalizedShortNameId\",",
									"                      \"fcsFileChannelIndex\"",
									"                    ]",
									"                  }",
									"                }",
									"              },",
									"              \"fcsFileToChannelsMap\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {}",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"uniqueChannelOrders\",",
									"              \"fcsFileToChannelsMap\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"channels\",",
									"          \"fcsFiles\",",
									"          \"panelChannelMappings\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"panels\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate panels schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Compensations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"compensation_id\", data.compensations[0].id);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"compensations\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sources\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"detectors\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"compensationMatrix\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"number\"",
									"              }",
									"            }",
									"          },",
									"          \"experimentId\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"creationMethodType\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"sources\",",
									"          \"detectors\",",
									"          \"compensationMatrix\",",
									"          \"experimentId\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"creationMethodType\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"compensations\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate compensations schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/compensations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"compensations"
							]
						},
						"description": "List all compensations for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "list viSNE runs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne"
							]
						},
						"description": "List gates for an experiment\n* foo\n* bar\n\n# one\n# two\n# three"
					},
					"response": []
				},
				{
					"name": "show viSNE with invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Body matches string\"] = responseBody.has(\"Couldn't find viSNE advanced analysis with\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/0?include_settings=1",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"0"
							],
							"query": [
								{
									"key": "include_settings",
									"value": "1"
								}
							]
						},
						"description": "Show viSNE details for invalid/none viSNE runs"
					},
					"response": []
				},
				{
					"name": "create viSNE w/o body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Body matches string\"] = responseBody.has(\"Failed to create viSNE analysis -- (param is missing or the value is empty: visne)\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"visne_id\", data.visne.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"visne\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"samplingTotalCount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"samplingTargetType\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"channelIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"populationSelections\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                  \"id\": {",
									"                    \"type\": \"integer\"",
									"                  },",
									"                  \"name\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"selected\": {",
									"                    \"type\": \"boolean\"",
									"                  },",
									"                  \"fcsFiles\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": {}",
									"                  }",
									"                },",
									"                \"required\": [",
									"                  \"id\",",
									"                  \"name\",",
									"                  \"selected\",",
									"                  \"fcsFiles\"",
									"                ]",
									"              }",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"samplingTotalCount\",",
									"            \"samplingTargetType\",",
									"            \"compensationId\",",
									"            \"channelIds\",",
									"            \"populationSelections\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"visne\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n    \"name\":  \"visne_api\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update viSNE w/o channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n    \"name\": \"visne_api_run_test\",\n    \"channels\": [],\n    \"compensationId\": {{compensation_id}},\n    \"samplingTotalCount\": 30000,\n    \"samplingTargetType\": \"proportional\",\n    \"populationSelections\": [\n      {\n        \"id\": 1,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n            \"id\": {{fcs_file_id_2}}\n         },\n         {\n           \"id\":  {{fcs_file_id_3}}\n         }\n       ]\n      },\n      {\n        \"id\": 2,\n        \"selected\": true,\n        \"fcsFiles\": [\n         {\n           \"id\": {{fcs_file_id_1}}\n         },\n         {\n            \"id\": {{fcs_file_id_2}}\n         }\n        ]\n      },\n      {\n        \"id\": 0,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n           \"id\": {{fcs_file_id_1}}\n         }\n          \n          ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							]
						},
						"description": "update visne settings"
					},
					"response": []
				},
				{
					"name": "run viSNE w/o channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"No channels are defined\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}",
								"run"
							]
						},
						"description": "run visne analysis"
					},
					"response": []
				},
				{
					"name": "update viSNE with seed value '0'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body contains invalid user error message\"] = responseBody.has(\"it must be greater than or equal to 1\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n    \"name\": \"visne_api_run_test\",\n    \"channels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"compensationId\": {{compensation_id}},\n    \"samplingTotalCount\": 30000,\n    \"samplingTargetType\": \"proportional\",\n    \"iterations\": 2000,\n    \"perplexity\": 50,\n    \"theta\": 0.8,\n    \"seed\": 0,\n    \"populationSelections\": [\n      {\n        \"id\": 1,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n            \"id\": {{fcs_file_id_2}}\n         },\n         {\n           \"id\":  {{fcs_file_id_3}}\n         }\n       ]\n      },\n      {\n        \"id\": 2,\n        \"selected\": true,\n        \"fcsFiles\": [\n         {\n           \"id\": {{fcs_file_id_1}}\n         },\n         {\n            \"id\": {{fcs_file_id_2}}\n         }\n        ]\n      },\n      {\n        \"id\": 0,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n           \"id\": {{fcs_file_id_1}}\n         }\n          \n          ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							]
						},
						"description": "update visne settings"
					},
					"response": []
				},
				{
					"name": "update viSNE with blank seed value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body contains seed message\"] = responseBody.has(\"Automatic\");",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"visne\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"samplingTotalCount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"samplingTargetType\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"channelIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"populationSelections\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                  \"id\": {",
									"                    \"type\": \"integer\"",
									"                  },",
									"                  \"name\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"selected\": {",
									"                    \"type\": \"boolean\"",
									"                  },",
									"                  \"fcsFiles\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"id\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        \"samplingCount\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"eventCount\": {",
									"                          \"type\": \"integer\"",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"id\",",
									"                        \"name\",",
									"                        \"samplingCount\",",
									"                        \"eventCount\"",
									"                      ]",
									"                    }",
									"                  }",
									"                },",
									"                \"required\": [",
									"                  \"id\",",
									"                  \"name\",",
									"                  \"selected\",",
									"                  \"fcsFiles\"",
									"                ]",
									"              }",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"samplingTotalCount\",",
									"            \"samplingTargetType\",",
									"            \"compensationId\",",
									"            \"channelIds\",",
									"            \"populationSelections\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"visne\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n    \"name\": \"visne_api_run_test\",\n    \"channels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"compensationId\": {{compensation_id}},\n    \"samplingTotalCount\": 30000,\n    \"samplingTargetType\": \"proportional\",\n    \"iterations\": 2000,\n    \"perplexity\": 50,\n    \"theta\": 0.8,\n    \"seed\": null,\n    \"populationSelections\": [\n      {\n        \"id\": 1,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n            \"id\": {{fcs_file_id_2}}\n         },\n         {\n           \"id\":  {{fcs_file_id_3}}\n         }\n       ]\n      },\n      {\n        \"id\": 2,\n        \"selected\": true,\n        \"fcsFiles\": [\n         {\n           \"id\": {{fcs_file_id_1}}\n         },\n         {\n            \"id\": {{fcs_file_id_2}}\n         }\n        ]\n      },\n      {\n        \"id\": 0,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n           \"id\": {{fcs_file_id_1}}\n         }\n          \n          ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							]
						},
						"description": "update visne settings"
					},
					"response": []
				},
				{
					"name": "update viSNE with negative seed value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body contains invalid user error message\"] = responseBody.has(\"it must be greater than or equal to 1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n    \"name\": \"visne_api_run_test\",\n    \"channels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"compensationId\": {{compensation_id}},\n    \"samplingTotalCount\": 30000,\n    \"samplingTargetType\": \"proportional\",\n    \"iterations\": 2000,\n    \"perplexity\": 50,\n    \"theta\": 0.8,\n    \"seed\": -2,\n    \"populationSelections\": [\n      {\n        \"id\": 1,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n            \"id\": {{fcs_file_id_2}}\n         },\n         {\n           \"id\":  {{fcs_file_id_3}}\n         }\n       ]\n      },\n      {\n        \"id\": 2,\n        \"selected\": true,\n        \"fcsFiles\": [\n         {\n           \"id\": {{fcs_file_id_1}}\n         },\n         {\n            \"id\": {{fcs_file_id_2}}\n         }\n        ]\n      },\n      {\n        \"id\": 0,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n           \"id\": {{fcs_file_id_1}}\n         }\n          \n          ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							]
						},
						"description": "update visne settings"
					},
					"response": []
				},
				{
					"name": "update viSNE with all settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"visne\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"samplingTotalCount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"samplingTargetType\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"channelIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"populationSelections\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                  \"id\": {",
									"                    \"type\": \"integer\"",
									"                  },",
									"                  \"name\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"selected\": {",
									"                    \"type\": \"boolean\"",
									"                  },",
									"                  \"fcsFiles\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"id\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        \"samplingCount\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"eventCount\": {",
									"                          \"type\": \"integer\"",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"id\",",
									"                        \"name\",",
									"                        \"samplingCount\",",
									"                        \"eventCount\"",
									"                      ]",
									"                    }",
									"                  }",
									"                },",
									"                \"required\": [",
									"                  \"id\",",
									"                  \"name\",",
									"                  \"selected\",",
									"                  \"fcsFiles\"",
									"                ]",
									"              }",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"samplingTotalCount\",",
									"            \"samplingTargetType\",",
									"            \"compensationId\",",
									"            \"channelIds\",",
									"            \"populationSelections\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"visne\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n    \"name\": \"visne_api_run_test\",\n    \"channels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"compensationId\": {{compensation_id}},\n    \"samplingTotalCount\": 30000,\n    \"samplingTargetType\": \"proportional\",\n    \"iterations\": 2000,\n    \"perplexity\": 50,\n    \"theta\": 0.8,\n    \"seed\": 1224,\n    \"populationSelections\": [\n      {\n        \"id\": 1,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n            \"id\": {{fcs_file_id_2}}\n         },\n         {\n           \"id\":  {{fcs_file_id_3}}\n         }\n       ]\n      },\n      {\n        \"id\": 2,\n        \"selected\": true,\n        \"fcsFiles\": [\n         {\n           \"id\": {{fcs_file_id_1}}\n         },\n         {\n            \"id\": {{fcs_file_id_2}}\n         }\n        ]\n      },\n      {\n        \"id\": 0,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n           \"id\": {{fcs_file_id_1}}\n         }\n          \n          ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							]
						},
						"description": "update visne settings"
					},
					"response": []
				},
				{
					"name": "run viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"advanced_analyses_status\": {",
									"            \"$id\": \"#/properties/advanced_analyses_status\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/id\"",
									"                },",
									"                \"name\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/name\"",
									"                },",
									"                \"status\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/status\"",
									"                },",
									"                \"progress\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/progress\"",
									"                },",
									"                \"startTime\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/startTime\"",
									"                },",
									"                \"endTime\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/endTime\"",
									"                },",
									"                \"runtime\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/runtime\"",
									"                },",
									"                \"progressMessage\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/progressMessage\"",
									"                },",
									"                \"createdExperiment\": {",
									"                    \"$id\": \"#/properties/advanced_analyses_status/properties/createdExperiment\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}",
								"run"
							]
						},
						"description": "run visne analysis"
					},
					"response": []
				},
				{
					"name": "update viSNE run in pending/running status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Could not update parameters\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n    \"name\": \"visne_api_run_test\",\n    \"channels\": [{{channel_id_1}},{{channel_id_2}},{{channel_id_3}},{{channel_id_4}}],\n    \"compensationId\": {{compensation_id}},\n    \"samplingTotalCount\": 30000,\n    \"samplingTargetType\": \"proportional\",\n    \"populationSelections\": [\n      {\n        \"id\": 1,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n            \"id\": {{fcs_file_id_1}}\n          },\n          {\n            \"id\": {{fcs_file_id_2}}\n         },\n         {\n           \"id\":  {{fcs_file_id_3}}\n         }\n       ]\n      },\n      {\n        \"id\": 2,\n        \"selected\": true,\n        \"fcsFiles\": [\n         {\n           \"id\": {{fcs_file_id_1}}\n         },\n         {\n            \"id\": {{fcs_file_id_2}}\n         }\n        ]\n      },\n      {\n        \"id\": 0,\n        \"selected\": true,\n        \"fcsFiles\": [\n          {\n           \"id\": {{fcs_file_id_1}}\n         }\n          \n          ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							]
						},
						"description": "update visne settings"
					},
					"response": []
				},
				{
					"name": "rename viSNE with blank name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Body matches string\"] = responseBody.has(\"Failed to rename analysis, name field is empty\");",
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n      \"name\": \"\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}",
								"rename"
							]
						}
					},
					"response": []
				},
				{
					"name": "rename viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"visne\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"visne\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"visne\":\n  {\n      \"name\": \"foooname\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}",
								"rename"
							]
						}
					},
					"response": []
				},
				{
					"name": "status_of_viSNE_run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"function sleep(milliseconds) {",
									"  var start = new Date().getTime();",
									"  for (var i = 0; i < 1e7; i++) {",
									"    if ((new Date().getTime() - start) > milliseconds) {",
									"      break;",
									"    }",
									"  }",
									"}",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.visneStatus.status !== \"Completed\") {",
									"  sleep(2000);",
									"  postman.setNextRequest(\"status_of_viSNE_run\");",
									"  console.log(\"Will run 'status_of_viSNE_run' once again and current status is: \"+data.visneStatus.status);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}",
								"status"
							]
						},
						"description": "Show visne status"
					},
					"response": []
				},
				{
					"name": "show viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"visne_exp_id\", data.visne.createdExperiment);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"visne\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"samplingTotalCount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"samplingTargetType\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"channelIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"populationSelections\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                  \"id\": {",
									"                    \"type\": \"integer\"",
									"                  },",
									"                  \"name\": {",
									"                    \"type\": \"string\"",
									"                  },",
									"                  \"selected\": {",
									"                    \"type\": \"boolean\"",
									"                  },",
									"                  \"fcsFiles\": {",
									"                    \"type\": \"array\",",
									"                    \"items\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"id\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"name\": {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        \"samplingCount\": {",
									"                          \"type\": \"integer\"",
									"                        },",
									"                        \"eventCount\": {",
									"                          \"type\": \"integer\"",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"id\",",
									"                        \"name\",",
									"                        \"samplingCount\",",
									"                        \"eventCount\"",
									"                      ]",
									"                    }",
									"                  }",
									"                },",
									"                \"required\": [",
									"                  \"id\",",
									"                  \"name\",",
									"                  \"selected\",",
									"                  \"fcsFiles\"",
									"                ]",
									"              }",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"samplingTotalCount\",",
									"            \"samplingTargetType\",",
									"            \"compensationId\",",
									"            \"channelIds\",",
									"            \"populationSelections\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"visne\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}?include_settings=1",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							],
							"query": [
								{
									"key": "include_settings",
									"value": "1"
								}
							]
						},
						"description": "Show a specific gate for an experiment"
					},
					"response": []
				},
				{
					"name": "viSNE copy_settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"visne_id\", data.visne.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"visne\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"visne\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}/copy_settings",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}",
								"copy_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List FCS Files viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{visne_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{visne_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Panels viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{visne_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{visne_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Gates for viSNE Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"/*var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of gates\"] = data.gates.length >= 1;",
									"postman.setEnvironmentVariable(\"gate_id\", data.gates[0].id);",
									"postman.setEnvironmentVariable(\"gate_version\", data.gates[0].version);",
									"",
									"for (var i = 0; i < data.gates.length; i++){",
									"    data.gates[i].id = null;",
									"    data.gates[i].experimentId = null;",
									"    data.gates[i].compensationId = null;",
									"",
									"    data.gates[i].fcsFileId = null;",
									"    data.gates[i].createdAt = null;",
									"    data.gates[i].updatedAt = null;",
									"}",
									"var respBody = JSON.stringify(data);",
									"if (typeof environment.gold_std_pbmc_gatesDetails === 'undefined' || environment.gold_std_pbmc_gatesDetails === \"\"){",
									"    postman.setEnvironmentVariable(\"gold_std_pbmc_gatesDetails\", respBody);",
									"}",
									"tests[\"Body matches gold standard data\"] = respBody === environment.gold_std_pbmc_gatesDetails;*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{visne_exp_id}}/gates",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{visne_exp_id}}",
								"gates"
							]
						},
						"description": "List gates for an experiment"
					},
					"response": []
				},
				{
					"name": "List Scales for visne Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{visne_exp_id}}/scales",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{visne_exp_id}}",
								"scales"
							]
						},
						"description": "List scales for an experiment"
					},
					"response": [
						{
							"name": "listScales",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{USERJWT}}"
									}
								],
								"url": {
									"raw": "{{HTTP_PROTOCOL}}://{{CYTO_SERVER}}/cytobank/api/v1/experiments/{{experiment_id}}/scales",
									"protocol": "{{HTTP_PROTOCOL}}",
									"host": [
										"{{CYTO_SERVER}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"experiments",
										"{{experiment_id}}",
										"scales"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Tue, 19 Apr 2016 14:15:25 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"434ad16a93e48ab0c209ff3d23b4f44f\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.657000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"scales\":[{\"id\":67070,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":17,\"scaleType\":4},{\"id\":67071,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":15,\"scaleType\":4},{\"id\":67072,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":20,\"scaleType\":4},{\"id\":67073,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":21,\"scaleType\":4},{\"id\":67074,\"minimum\":1.0,\"maximum\":262144.0,\"cofactor\":1,\"experimentId\":7586,\"normalizedShortNameId\":1,\"scaleType\":1},{\"id\":67075,\"minimum\":1.0,\"maximum\":262144.0,\"cofactor\":1,\"experimentId\":7586,\"normalizedShortNameId\":2,\"scaleType\":1},{\"id\":67076,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":22,\"scaleType\":4},{\"id\":67077,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":24,\"scaleType\":4},{\"id\":67078,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":13,\"scaleType\":4},{\"id\":67079,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":19,\"scaleType\":4},{\"id\":67080,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":18,\"scaleType\":4},{\"id\":67081,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":14,\"scaleType\":4},{\"id\":67082,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":23,\"scaleType\":4},{\"id\":67083,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":25,\"scaleType\":4},{\"id\":67084,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":26,\"scaleType\":4},{\"id\":67085,\"minimum\":-200.0,\"maximum\":262144.0,\"cofactor\":150,\"experimentId\":7586,\"normalizedShortNameId\":27,\"scaleType\":4},{\"id\":67086,\"minimum\":1.0,\"maximum\":262144.0,\"cofactor\":1,\"experimentId\":7586,\"normalizedShortNameId\":4,\"scaleType\":1},{\"id\":67087,\"minimum\":1.0,\"maximum\":262144.0,\"cofactor\":1,\"experimentId\":7586,\"normalizedShortNameId\":16,\"scaleType\":1}]}"
						}
					]
				},
				{
					"name": "List Populations viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{visne_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{visne_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "delete viSNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/visne/{{visne_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"visne",
								"{{visne_id}}"
							]
						},
						"description": "Delete the experiment Permanently along with all its child eperiments."
					},
					"response": []
				},
				{
					"name": "Trash Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Experiment trashed successfully\"] = data !== \"\" && typeof data.experiment === 'object';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"experiment\":\n  {\n    \"deleted\":  true\n  }\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}"
							]
						},
						"description": "Mark the experiment deleted and move it to the trash."
					},
					"response": []
				}
			]
		},
		{
			"name": "3.0 Advanced Analyses-citrus",
			"item": [
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_jwt\", data.user.authToken);",
									"postman.setGlobalVariable(\"user_jwt\", data.user.authToken);",
									"postman.setEnvironmentVariable(\"userid\", data.user.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Response body contains authToken\"] = responseBody.has(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\");",
									"if (data.user.id > 2){",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id - 1);",
									"}else{",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id + 1);",
									"}",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"username\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"location\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"organization\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"twitter\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bio\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"hideEmail\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginIp\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"authToken\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        // \"location\",",
									"        // \"organization\",",
									"        // \"bio\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"principalInvestigatorId\",",
									"        \"hideEmail\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"lastLoginAt\",",
									"        \"lastLoginIp\",",
									"        \"authToken\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"user\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "UTF-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"authenticate"
							]
						}
					},
					"response": [
						{
							"name": "authenticate-user.json",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "charset",
										"value": "UTF-8"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
								},
								"url": {
									"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
									"protocol": "https",
									"host": [
										"{{cyto_server}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "758",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 23 May 2016 05:20:43 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"8864d52516a23f4b44bda1b304617730\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31622400; includeSubDomains",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.769000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"user\":{\"id\":110,\"username\":\"swapnil01\",\"location\":\"Mountain View, CA\",\"organization\":\"Cytobank Inc.\",\"twitter\":\"\",\"bio\":\"\",\"firstName\":\"Swapnil01dev01\",\"lastName\":\"Patne01\",\"email\":\"swapnil+1dev01@cytobank.org\",\"principalInvestigatorId\":null,\"hideEmail\":true,\"createdAt\":\"2016-03-29T12:52:21Z\",\"updatedAt\":\"2016-05-23T05:20:43Z\",\"lastLoginAt\":\"2016-05-13T08:58:05Z\",\"lastLoginIp\":\"49.248.212.18\",\"authToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1NTU2YjM1MzE4MGVjYjcyMDMyM2M2OTlkMjRjZWJkMCIsImV4cCI6MTQ2NDAwOTY0MiwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTEwLCJpYXQiOjE0NjM5ODA4NDIsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ2Mzk4MDg0Miwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.cv_PllzIhwqdKdwFVaoG9ME_PrK1y0qdgQ5Q0MXue44\"}}"
						}
					]
				},
				{
					"name": "List Exps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"for (var i =0; i < data.experiments.length; i++){",
									"    if (data.experiments[i].experimentName == environment.API_CITRUS_EXP){",
									"        postman.setEnvironmentVariable(\"citrus_exp_id\", data.experiments[i].id);",
									"        postman.setEnvironmentVariable(\"exp_version\", data.experiments[i].version);",
									"        break;",
									"    }",
									"}",
									"tests[\"Body contains list of experiments\"] = data.experiments.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments"
							]
						},
						"description": "List All experimetns for the user"
					},
					"response": []
				},
				{
					"name": "Clone CITRUS Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cloned_citrus_exp_id\", data.experiment.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Experiment cloned successfully\"] = data !== \"\" && typeof data.experiment === 'object';",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{citrus_exp_id}}/clone",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{citrus_exp_id}}",
								"clone"
							]
						},
						"description": "Clone Experiment for user, provided user has access to clone it, other wise return informative error."
					},
					"response": []
				},
				{
					"name": "Exp Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}"
							]
						},
						"description": "Show experiemnt details for the exp id sent over request."
					},
					"response": []
				},
				{
					"name": "List FCS Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of fcs files\"] = data.fcsFiles.length >= 1;",
									"for (var i=0;i < data.fcsFiles.length; i++)",
									"{",
									"postman.setEnvironmentVariable(\"fcs_file_id_\"+[i], data.fcsFiles[i].id);",
									"}",
									"",
									"//postman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"//??postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"//postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_7\", data.fcsFiles[6].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_8\", data.fcsFiles[7].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_9\", data.fcsFiles[8].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_10\", data.fcsFiles[9].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_11\", data.fcsFiles[10].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_12\", data.fcsFiles[11].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_13\", data.fcsFiles[12].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_14\", data.fcsFiles[13].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_15\", data.fcsFiles[14].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_16\", data.fcsFiles[15].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_17\", data.fcsFiles[16].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_18\", data.fcsFiles[17].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_19\", data.fcsFiles[18].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_20\", data.fcsFiles[19].id);",
									"var all_fcs_file_ids = data.fcsFiles[0].id;",
									"for (var i =1; i < data.fcsFiles.length; i++){",
									"    all_fcs_file_ids = (all_fcs_file_ids +\", \"+ data.fcsFiles[i].id);",
									"}",
									"postman.setEnvironmentVariable(\"all_fcs_file_ids\", all_fcs_file_ids);",
									"for (var i = 0; i < data.fcsFiles.length; i++){",
									"    data.fcsFiles[i].id = null;",
									"    data.fcsFiles[i].experimentId = null;",
									"    data.fcsFiles[i].createdAt = null;",
									"    data.fcsFiles[i].updatedAt = null;",
									"    data.fcsFiles[i].experimentName = null;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Populations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"",
									"for (var i =0; i < data.populations.length; i++){",
									"if (data.populations[i].name==environment.population_1){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"else if(data.populations[i].name==environment.population_2){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "List Panels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.panels[0].channels.length; i++){",
									"    if (data.panels[0].channels[i].longName.match(\"CD\")){",
									"postman.setEnvironmentVariable(\"panel_id\", data.panels[0].id);",
									"postman.setEnvironmentVariable(\"channel_id_\"+count, data.panels[0].channels[i].normalizedShortNameId);",
									"count++;",
									"//postman.setEnvironmentVariable(\"channel_id_2\", data.panels[0].channels[i].normalizedShortNameId);",
									"    }",
									"}",
									"tests[\"Body contains panels\"] = data.panels.length >= 1;",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"panels\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"channels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"longName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"normalizedShortNameId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"fcsFileChannelIndex\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"shortName\",",
									"                \"longName\",",
									"                \"normalizedShortNameId\",",
									"                \"fcsFileChannelIndex\"",
									"              ]",
									"            }",
									"          },",
									"          \"fcsFiles\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"panelChannelMappings\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"uniqueChannelOrders\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"shortName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"longName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"normalizedShortNameId\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"fcsFileChannelIndex\": {",
									"                        \"type\": \"integer\"",
									"                      }",
									"                    },",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"shortName\",",
									"                      \"longName\",",
									"                      \"normalizedShortNameId\",",
									"                      \"fcsFileChannelIndex\"",
									"                    ]",
									"                  }",
									"                }",
									"              },",
									"              \"fcsFileToChannelsMap\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {}",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"uniqueChannelOrders\",",
									"              \"fcsFileToChannelsMap\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"channels\",",
									"          \"fcsFiles\",",
									"          \"panelChannelMappings\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"panels\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate panels schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Compensations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"compensation_id\", data.compensations[0].id);",
									"",
									"",
									"// gold standard for compensations?",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"compensations\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sources\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"detectors\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"compensationMatrix\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"number\"",
									"              }",
									"            }",
									"          },",
									"          \"experimentId\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"creationMethodType\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"sources\",",
									"          \"detectors\",",
									"          \"compensationMatrix\",",
									"          \"experimentId\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"creationMethodType\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"compensations\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate compensations schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/compensations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"compensations"
							]
						},
						"description": "List all compensations for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "create CITRUS (blank name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Failed to create CITRUS analysis -- (param is missing or the value is empty: name)\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"name\": \"\"\n} "
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								""
							]
						},
						"description": "create a new citrus task without name"
					},
					"response": []
				},
				{
					"name": "create CITRUS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"citrus_id\", data.citrus.id);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"name\": \"CitrusDemo_1\"\n} "
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus"
							]
						},
						"description": "create a new citrus task"
					},
					"response": []
				},
				{
					"name": "list CITRUS runs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"var schema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"type\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"author\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"status\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sourceExperiment\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdExperiment\": {",
									"            \"type\": \"null\"",
									"          },",
									"          \"attachment_id\": {",
									"            \"type\": \"null\"",
									"          },",
									"          \"canceled\": {",
									"            \"type\": \"boolean\"",
									"          },",
									"          \"completed\": {",
									"            \"type\": \"boolean\"",
									"          },",
									"          \"results\": {",
									"            \"type\": \"null\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"type\",",
									"          \"author\",",
									"          \"status\",",
									"          \"sourceExperiment\",",
									"          \"createdExperiment\",",
									"          \"attachment_id\",",
									"          \"canceled\",",
									"          \"completed\",",
									"          \"results\",",
									"          \"createdAt\",",
									"          \"updatedAt\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus"
							]
						},
						"description": "List all citrus tasks for an experiment\n"
					},
					"response": []
				},
				{
					"name": "show CITRUS details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"associationModels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"attachmentId\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"clusterIds\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"clusteringShortNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringCharacterization\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"crossValidationFolds\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"eventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"falseDiscoveryRate\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"fcsFileNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"fileGroupNames\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"fileGrouping\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"minimumClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"plotTheme\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statisticsChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"associationModels\",",
									"            \"attachmentId\",",
									"            \"clusterIds\",",
									"            \"clusteringChannels\",",
									"            \"clusteringShortNamesForR\",",
									"            \"clusteringCharacterization\",",
									"            \"compensationId\",",
									"            \"crossValidationFolds\",",
									"            \"eventSamplingMethod\",",
									"            \"eventsPerFile\",",
									"            \"falseDiscoveryRate\",",
									"            \"fcsFileNamesForR\",",
									"            \"fileGroupNames\",",
									"            \"fileGrouping\",",
									"            \"finalResult\",",
									"            \"gateSetId\",",
									"            \"minimumClusterSize\",",
									"            \"normalizeScales\",",
									"            \"plotTheme\",",
									"            \"statisticsChannels\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}?include_settings=1",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							],
							"query": [
								{
									"key": "include_settings",
									"value": "1"
								}
							]
						},
						"description": "Show a specific citrus task for an experiment"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Multiple populations)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"associationModels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"attachmentId\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"clusterIds\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"clusteringShortNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringCharacterization\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"crossValidationFolds\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"eventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"falseDiscoveryRate\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"fcsFileNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"fileGroupNames\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"fileGrouping\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"minimumClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"plotTheme\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statisticsChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"associationModels\",",
									"            \"attachmentId\",",
									"            \"clusterIds\",",
									"            \"clusteringChannels\",",
									"            \"clusteringShortNamesForR\",",
									"            \"clusteringCharacterization\",",
									"            \"compensationId\",",
									"            \"crossValidationFolds\",",
									"            \"eventSamplingMethod\",",
									"            \"eventsPerFile\",",
									"            \"falseDiscoveryRate\",",
									"            \"fcsFileNamesForR\",",
									"            \"fileGroupNames\",",
									"            \"fileGrouping\",",
									"            \"finalResult\",",
									"            \"gateSetId\",",
									"            \"minimumClusterSize\",",
									"            \"normalizeScales\",",
									"            \"plotTheme\",",
									"            \"statisticsChannels\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": [0, 1],\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2739,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Multiple Compensations)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\": [-2, -1],\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Both Cluster Characterization)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\": [\"abundances\", \"medians\"],\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Medians with no statistic channels)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Please select which channels to calculate statistics for underneath the Cluster Characterization section\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\": \"medians\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Three Groups for glmnet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"If using GLMNET as an association model, please assign files to exactly two groups\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 2 ], [ {{fcs_file_id_16}}, 2 ], [ {{fcs_file_id_17}}, 2 ], [ {{fcs_file_id_18}}, 2 ], [ {{fcs_file_id_19}}, 2 ]],\r\n  \"fileGroupNames\":[ \"abc\", \"def\", \"ghi\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"glmnet\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings\nExactly two groups are required for glmnet association model"
					},
					"response": []
				},
				{
					"name": "update CITRUS (max-per-file sampling)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":4557,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"max-per-file\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Two Groups with dark plot theme)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"associationModels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"attachmentId\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"clusterIds\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"clusteringShortNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringCharacterization\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"crossValidationFolds\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"eventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"falseDiscoveryRate\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"fcsFileNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"fileGroupNames\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"fileGrouping\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"minimumClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"plotTheme\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statisticsChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"associationModels\",",
									"            \"attachmentId\",",
									"            \"clusterIds\",",
									"            \"clusteringChannels\",",
									"            \"clusteringShortNamesForR\",",
									"            \"clusteringCharacterization\",",
									"            \"compensationId\",",
									"            \"crossValidationFolds\",",
									"            \"eventSamplingMethod\",",
									"            \"eventsPerFile\",",
									"            \"falseDiscoveryRate\",",
									"            \"fcsFileNamesForR\",",
									"            \"fileGroupNames\",",
									"            \"fileGrouping\",",
									"            \"finalResult\",",
									"            \"gateSetId\",",
									"            \"minimumClusterSize\",",
									"            \"normalizeScales\",",
									"            \"plotTheme\",",
									"            \"statisticsChannels\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":1,\r\n  \"crossValidationFolds\":10,\r\n  \"falseDiscoveryRate\":0.9,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"black\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Two Groups with normalize scales)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"associationModels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"attachmentId\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"clusterIds\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"clusteringShortNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringCharacterization\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"crossValidationFolds\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"eventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"falseDiscoveryRate\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"fcsFileNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"fileGroupNames\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"fileGrouping\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"minimumClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"plotTheme\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statisticsChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"associationModels\",",
									"            \"attachmentId\",",
									"            \"clusterIds\",",
									"            \"clusteringChannels\",",
									"            \"clusteringShortNamesForR\",",
									"            \"clusteringCharacterization\",",
									"            \"compensationId\",",
									"            \"crossValidationFolds\",",
									"            \"eventSamplingMethod\",",
									"            \"eventsPerFile\",",
									"            \"falseDiscoveryRate\",",
									"            \"fcsFileNamesForR\",",
									"            \"fileGroupNames\",",
									"            \"fileGrouping\",",
									"            \"finalResult\",",
									"            \"gateSetId\",",
									"            \"minimumClusterSize\",",
									"            \"normalizeScales\",",
									"            \"plotTheme\",",
									"            \"statisticsChannels\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":1,\r\n  \"crossValidationFolds\":10,\r\n  \"falseDiscoveryRate\":0.9,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":true,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Two Groups with Medians)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"associationModels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"attachmentId\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"clusterIds\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"clusteringShortNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringCharacterization\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"crossValidationFolds\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"eventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"falseDiscoveryRate\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"fcsFileNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"fileGroupNames\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"fileGrouping\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"minimumClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"plotTheme\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statisticsChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"associationModels\",",
									"            \"attachmentId\",",
									"            \"clusterIds\",",
									"            \"clusteringChannels\",",
									"            \"clusteringShortNamesForR\",",
									"            \"clusteringCharacterization\",",
									"            \"compensationId\",",
									"            \"crossValidationFolds\",",
									"            \"eventSamplingMethod\",",
									"            \"eventsPerFile\",",
									"            \"falseDiscoveryRate\",",
									"            \"fcsFileNamesForR\",",
									"            \"fileGroupNames\",",
									"            \"fileGrouping\",",
									"            \"finalResult\",",
									"            \"gateSetId\",",
									"            \"minimumClusterSize\",",
									"            \"normalizeScales\",",
									"            \"plotTheme\",",
									"            \"statisticsChannels\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[{{channel_id_2}}],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\": \"medians\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Two Groups with abundances)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"associationModels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"attachmentId\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"clusterIds\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"clusteringShortNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"clusteringCharacterization\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"crossValidationFolds\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"eventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"falseDiscoveryRate\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"fcsFileNamesForR\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"fileGroupNames\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"string\"",
									"              }",
									"            },",
									"            \"fileGrouping\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"minimumClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"plotTheme\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statisticsChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"associationModels\",",
									"            \"attachmentId\",",
									"            \"clusterIds\",",
									"            \"clusteringChannels\",",
									"            \"clusteringShortNamesForR\",",
									"            \"clusteringCharacterization\",",
									"            \"compensationId\",",
									"            \"crossValidationFolds\",",
									"            \"eventSamplingMethod\",",
									"            \"eventsPerFile\",",
									"            \"falseDiscoveryRate\",",
									"            \"fcsFileNamesForR\",",
									"            \"fileGroupNames\",",
									"            \"fileGrouping\",",
									"            \"finalResult\",",
									"            \"gateSetId\",",
									"            \"minimumClusterSize\",",
									"            \"normalizeScales\",",
									"            \"plotTheme\",",
									"            \"statisticsChannels\"",
									"          ]",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS(One Group)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Please assign files to at least two groups\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 0 ], [ {{fcs_file_id_12}}, 0 ], [ {{fcs_file_id_13}}, 0 ], [ {{fcs_file_id_14}}, 0 ], [ {{fcs_file_id_15}}, 0 ], [ {{fcs_file_id_16}}, 0 ], [ {{fcs_file_id_17}}, 0 ], [ {{fcs_file_id_18}}, 0 ], [ {{fcs_file_id_19}}, 0 ]],\r\n  \"fileGroupNames\":[ \"Basal1\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "update CITRUS (Three Groups)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[ ],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 2 ], [ {{fcs_file_id_16}}, 2 ], [ {{fcs_file_id_17}}, 2 ], [ {{fcs_file_id_18}}, 2 ], [ {{fcs_file_id_19}}, 2 ]],\r\n  \"fileGroupNames\":[ \"abc\", \"def\", \"ghi\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2739,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\":\"abundances\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "copy_settings CITRUS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}/copy_settings",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}",
								"copy_settings"
							]
						},
						"description": "create a new citrus task by coping citrus settings from another citrus task. "
					},
					"response": []
				},
				{
					"name": "rename CITRUS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n  {\n      \"name\": \"newCITRUS_11\"\n  }\n"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}",
								"rename"
							]
						},
						"description": "rename a citrus task"
					},
					"response": []
				},
				{
					"name": "run CITRUS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"citrus\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"citrus\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}",
								"run"
							]
						},
						"description": "run a newly created citrus task"
					},
					"response": []
				},
				{
					"name": "update CITRUS run in pending/running status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Could not update parameters\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"testCITRUS_API_2\",\r\n\"type\":\"CitrusAdvancedAnalysis\",\r\n\"options\":\r\n{ \r\n  \"status\":\"New\",\r\n  \"backgroundTaskId\":\"\",\r\n  \"exportingTaskId\":\"\",\r\n  \"attachmentId\":null,\r\n  \"finalResult\":\"\",\r\n  \"clusteringChannels\":[ {{channel_id_2}}, {{channel_id_6}}, {{channel_id_7}}, {{channel_id_8}}, {{channel_id_9}}, {{channel_id_10}}, {{channel_id_11}}, {{channel_id_12}}, {{channel_id_13}}, {{channel_id_14}}, {{channel_id_15}}, {{channel_id_16}}, {{channel_id_17}} ],\r\n  \"statisticsChannels\":[{{channel_id_2}}],\r\n  \"fileGrouping\":[ [ {{fcs_file_id_0}}, 0 ],[ {{fcs_file_id_1}}, 0 ], [ {{fcs_file_id_2}}, 0 ], [ {{fcs_file_id_3}}, 0 ], [ {{fcs_file_id_4}}, 0 ], [ {{fcs_file_id_5}}, 0 ], [ {{fcs_file_id_6}}, 0 ], [ {{fcs_file_id_7}}, 0 ], [ {{fcs_file_id_8}}, 0 ], [ {{fcs_file_id_9}}, 0 ], [ {{fcs_file_id_10}}, 0 ],[ {{fcs_file_id_11}}, 1 ], [ {{fcs_file_id_12}}, 1 ], [ {{fcs_file_id_13}}, 1 ], [ {{fcs_file_id_14}}, 1 ], [ {{fcs_file_id_15}}, 1 ], [ {{fcs_file_id_16}}, 1 ], [ {{fcs_file_id_17}}, 1 ], [ {{fcs_file_id_18}}, 1 ], [ {{fcs_file_id_19}}, 1 ]],\r\n  \"fileGroupNames\":[ \"Basal1\", \"IL7\" ],\r\n  \"exportedExperimentIds\":[ ],\r\n  \"gateSetId\":0,\r\n  \"population\": {{population_id_1}},\r\n  \"compensationId\":-2,\r\n  \"eventsPerFile\":2064,\r\n  \"minimumClusterSize\":5,\r\n  \"crossValidationFolds\":5,\r\n  \"falseDiscoveryRate\":1,\r\n  \"associationModels\":[ \"pamr\" ],\r\n  \"clusteringCharacterization\": \"medians\",\r\n  \"eventSamplingMethod\":\"equal\",\r\n  \"normalizeScales\":false,\r\n  \"plotTheme\":\"white\" \r\n  \r\n}\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "update citrus task settings"
					},
					"response": []
				},
				{
					"name": "status_CITRUS_run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"function sleep(milliseconds) {",
									"  var start = new Date().getTime();",
									"  for (var i = 0; i < 1e7; i++) {",
									"    if ((new Date().getTime() - start) > milliseconds) {",
									"      break;",
									"    }",
									"  }",
									"}",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.advanced_analyses_status.status !== \"Completed\") {",
									"  sleep(2000);",
									"  postman.setNextRequest(\"status_CITRUS_run\");",
									"  console.log(\"Will run 'status_CITRUS_run' once again and current status is: \"+data.advanced_analyses_status.status);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}",
								"status"
							]
						},
						"description": "show citrus task status"
					},
					"response": []
				},
				{
					"name": "show CITRUS details after run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"postman.setEnvironmentVariable(\"citrus_attachment_id\", data.citrus.attachment_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}?include_settings=1",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							],
							"query": [
								{
									"key": "include_settings",
									"value": "1"
								}
							]
						},
						"description": "Show a specific citrus task for an experiment"
					},
					"response": []
				},
				{
					"name": "Show Citrus Attachment Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"attachment_name\", data.attachment.filename);",
									"postman.setEnvironmentVariable(\"attachment_hash\", data.attachment.uniqueHash);",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"attachment\"",
									"  ],",
									"  \"properties\": {",
									"    \"attachment\": {",
									"      \"$id\": \"#/properties/attachment\",",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"filename\",",
									"        \"size\",",
									"        \"description\",",
									"        \"type\",",
									"        \"experimentId\",",
									"        \"uploadedById\",",
									"        \"mimeType\",",
									"        \"md5sum\",",
									"        \"protocolId\",",
									"        \"fcsFileId\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"analysisId\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"$id\": \"#/properties/attachment/properties/id\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"filename\": {",
									"          \"$id\": \"#/properties/attachment/properties/filename\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"size\": {",
									"          \"$id\": \"#/properties/attachment/properties/size\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"description\": {",
									"          \"$id\": \"#/properties/attachment/properties/description\",",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"$id\": \"#/properties/attachment/properties/type\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"experimentId\": {",
									"          \"$id\": \"#/properties/attachment/properties/experimentId\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"uploadedById\": {",
									"          \"$id\": \"#/properties/attachment/properties/uploadedById\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"mimeType\": {",
									"          \"$id\": \"#/properties/attachment/properties/mimeType\",",
									"          \"type\": \"string\"",
									"        },",
									"        \"md5sum\": {",
									"          \"$id\": \"#/properties/attachment/properties/md5sum\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"protocolId\": {",
									"          \"$id\": \"#/properties/attachment/properties/protocolId\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"fcsFileId\": {",
									"          \"$id\": \"#/properties/attachment/properties/fcsFileId\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdAt\": {",
									"          \"$id\": \"#/properties/attachment/properties/createdAt\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"$id\": \"#/properties/attachment/properties/updatedAt\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"analysisId\": {",
									"          \"$id\": \"#/properties/attachment/properties/analysisId\",",
									"          \"type\": \"null\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"tests[\"Validate individual attachment schema\"] = tv4.validate(data, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/attachments/{{citrus_attachment_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"attachments",
								"{{citrus_attachment_id}}"
							]
						},
						"description": "Show details of a specific attachment for an experiment."
					},
					"response": []
				},
				{
					"name": "Generate Download URL Attachment Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"pm.environment.set(\"download_single_fcs\", data.downloadUrl);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://qa-titan-api.cytobank.org/api/v1/download/url?experimentId={{cloned_citrus_exp_id}}&hashKey={{attachment_hash}}&fileName={{attachment_name}}&fileType=Attachment",
							"protocol": "https",
							"host": [
								"qa-titan-api",
								"cytobank",
								"org"
							],
							"path": [
								"api",
								"v1",
								"download",
								"url"
							],
							"query": [
								{
									"key": "experimentId",
									"value": "{{cloned_citrus_exp_id}}"
								},
								{
									"key": "hashKey",
									"value": "{{attachment_hash}}"
								},
								{
									"key": "fileName",
									"value": "{{attachment_name}}"
								},
								{
									"key": "fileType",
									"value": "Attachment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Attachment data service Copy 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{download_single_fcs}}",
							"host": [
								"{{download_single_fcs}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete CITRUS run",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_citrus_exp_id}}/advanced_analyses/citrus/{{citrus_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_citrus_exp_id}}",
								"advanced_analyses",
								"citrus",
								"{{citrus_id}}"
							]
						},
						"description": "Delete citrus task for an experiment."
					},
					"response": []
				}
			]
		},
		{
			"name": "4.0 FlowSOM",
			"item": [
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_jwt\", data.user.authToken);",
									"postman.setGlobalVariable(\"user_jwt\", data.user.authToken);",
									"postman.setEnvironmentVariable(\"userid\", data.user.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Response body contains authToken\"] = responseBody.has(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\");",
									"if (data.user.id > 2){",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id - 1);",
									"}else{",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id + 1);",
									"}",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"username\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"location\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"organization\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"twitter\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bio\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"hideEmail\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginIp\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"authToken\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        // \"location\",",
									"        // \"organization\",",
									"        // \"bio\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"principalInvestigatorId\",",
									"        \"hideEmail\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"lastLoginAt\",",
									"        \"lastLoginIp\",",
									"        \"authToken\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"user\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "UTF-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"authenticate"
							]
						}
					},
					"response": [
						{
							"name": "authenticate-user.json",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "charset",
										"value": "UTF-8"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
								},
								"url": {
									"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
									"protocol": "https",
									"host": [
										"{{cyto_server}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "758",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 23 May 2016 05:20:43 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"8864d52516a23f4b44bda1b304617730\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31622400; includeSubDomains; preload",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.769000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"user\":{\"id\":110,\"username\":\"swapnil01\",\"location\":\"Mountain View, CA\",\"organization\":\"Cytobank Inc.\",\"twitter\":\"\",\"bio\":\"\",\"firstName\":\"Swapnil01dev01\",\"lastName\":\"Patne01\",\"email\":\"swapnil+1dev01@cytobank.org\",\"principalInvestigatorId\":null,\"hideEmail\":true,\"createdAt\":\"2016-03-29T12:52:21Z\",\"updatedAt\":\"2016-05-23T05:20:43Z\",\"lastLoginAt\":\"2016-05-13T08:58:05Z\",\"lastLoginIp\":\"49.248.212.18\",\"authToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1NTU2YjM1MzE4MGVjYjcyMDMyM2M2OTlkMjRjZWJkMCIsImV4cCI6MTQ2NDAwOTY0MiwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTEwLCJpYXQiOjE0NjM5ODA4NDIsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ2Mzk4MDg0Miwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.cv_PllzIhwqdKdwFVaoG9ME_PrK1y0qdgQ5Q0MXue44\"}}"
						}
					]
				},
				{
					"name": "List Exps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"for (var i =0; i < data.experiments.length; i++){",
									"    if (data.experiments[i].experimentName == environment.FlowSOM_experiment){",
									"        postman.setEnvironmentVariable(\"FlowSOM_exp_id\", data.experiments[i].id);",
									"        postman.setEnvironmentVariable(\"exp_version\", data.experiments[i].version);",
									"        break;",
									"    }",
									"}",
									"tests[\"Body contains list of experiments\"] = data.experiments.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments"
							]
						},
						"description": "List All experimetns for the user"
					},
					"response": []
				},
				{
					"name": "list FlowSOM Analyses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"flowsom_id\", data.flowsom[0].id);",
									"var schema = {",
									"  \"type\": \"object\", ",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ], ",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"type\": \"array\", ",
									"      \"items\": {",
									"        \"type\": \"object\", ",
									"        \"required\": [",
									"          \"id\", ",
									"          \"name\", ",
									"          \"type\", ",
									"          \"author\", ",
									"          \"status\", ",
									"          \"sourceExperiment\", ",
									"          \"createdExperiment\", ",
									"          \"attachment_id\", ",
									"          \"canceled\", ",
									"          \"completed\", ",
									"          \"results\", ",
									"          \"createdAt\", ",
									"          \"updatedAt\"",
									"        ], ",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          }, ",
									"          \"name\": {",
									"            \"type\": \"string\", ",
									"            \"pattern\": \"^(.*)$\"",
									"          }, ",
									"          \"type\": {",
									"            \"type\": \"string\", ",
									"            \"pattern\": \"^(.*)$\"",
									"          }, ",
									"          \"author\": {",
									"            \"type\": \"string\", ",
									"            \"pattern\": \"^(.*)$\"",
									"          }, ",
									"          \"status\": {",
									"            \"type\": \"string\", ",
									"            \"pattern\": \"^(.*)$\"",
									"          }, ",
									"          \"sourceExperiment\": {",
									"            \"type\": \"integer\"",
									"          }, ",
									"          \"createdExperiment\": {",
									"            \"type\": \"integer\"",
									"          }, ",
									"          \"attachment_id\": {",
									"            \"type\": \"integer\"",
									"          }, ",
									"          \"canceled\": {",
									"            \"type\": \"boolean\"",
									"          }, ",
									"          \"completed\": {",
									"            \"type\": \"boolean\"",
									"          }, ",
									"          \"results\": {",
									"            \"type\": \"null\"",
									"          }, ",
									"          \"createdAt\": {",
									"            \"type\": \"string\", ",
									"            \"pattern\": \"^(.*)$\"",
									"          }, ",
									"          \"updatedAt\": {",
									"            \"type\": \"string\", ",
									"            \"pattern\": \"^(.*)$\"",
									"          }",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{FlowSOM_exp_id}}/advanced_analyses/flowsom",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{FlowSOM_exp_id}}",
								"advanced_analyses",
								"flowsom"
							]
						},
						"description": "List all flowsom tasks for an experiment"
					},
					"response": []
				},
				{
					"name": "show FlowSOMdetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{FlowSOM_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{FlowSOM_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}"
							]
						},
						"description": "Show a specific flowsom task for an experiment"
					},
					"response": []
				},
				{
					"name": "Clone FlowSOMExperiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cloned_flowsom_exp_id\", data.experiment.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Experiment cloned successfully\"] = data !== \"\" && typeof data.experiment === 'object';",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{FlowSOM_exp_id}}/clone",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{FlowSOM_exp_id}}",
								"clone"
							]
						},
						"description": "Clone Experiment for user, provided user has access to clone it, other wise return informative error."
					},
					"response": []
				},
				{
					"name": "Exp Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate experiment details schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}"
							]
						},
						"description": "Show experiemnt details for the exp id sent over request."
					},
					"response": []
				},
				{
					"name": "List FCS Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of fcs files\"] = data.fcsFiles.length >= 1;",
									"for (var i=0;i < data.fcsFiles.length; i++)",
									"{",
									"postman.setEnvironmentVariable(\"fcs_file_id_\"+[i], data.fcsFiles[i].id);",
									"}",
									"// postman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_4\", data.fcsFiles[3].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_5\", data.fcsFiles[4].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_6\", data.fcsFiles[5].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_7\", data.fcsFiles[6].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_8\", data.fcsFiles[7].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_9\", data.fcsFiles[8].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_10\", data.fcsFiles[9].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_11\", data.fcsFiles[10].id);",
									"var all_fcs_file_ids = data.fcsFiles[0].id;",
									"for (var i =1; i < data.fcsFiles.length; i++){",
									"    all_fcs_file_ids = (all_fcs_file_ids +\", \"+ data.fcsFiles[i].id);",
									"}",
									"postman.setEnvironmentVariable(\"all_fcs_file_ids\", all_fcs_file_ids);",
									"for (var i = 0; i < data.fcsFiles.length; i++){",
									"    data.fcsFiles[i].id = null;",
									"    data.fcsFiles[i].experimentId = null;",
									"    data.fcsFiles[i].createdAt = null;",
									"    data.fcsFiles[i].updatedAt = null;",
									"    data.fcsFiles[i].experimentName = null;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Populations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.populations.length; i++){",
									"//if (data.populations[i].name==environment.population_1){",
									"if (data.populations[i].name.match(\"intact\")) {",
									"    //postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"    postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId)",
									"}",
									"if (data.populations[i].name.match(\"CD\")){",
									"    postman.setEnvironmentVariable(\"population_id_\"+count, data.populations[i].gateSetId)",
									"    count++;",
									"       ",
									"}",
									"else if(data.populations[i].name==environment.population_2){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "List Panels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.panels[0].channels.length; i++){",
									"    if (data.panels[0].channels[i].longName.match(\"CD\")){",
									"postman.setEnvironmentVariable(\"panel_id\", data.panels[0].id);",
									"postman.setEnvironmentVariable(\"channel_id_\"+count, data.panels[0].channels[i].normalizedShortNameId);",
									"count++;",
									"//postman.setEnvironmentVariable(\"channel_id_2\", data.panels[0].channels[i].normalizedShortNameId);",
									"    }",
									"}",
									"tests[\"Body contains panels\"] = data.panels.length >= 1;",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"panels\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"channels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"longName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"normalizedShortNameId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"fcsFileChannelIndex\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"shortName\",",
									"                \"longName\",",
									"                \"normalizedShortNameId\",",
									"                \"fcsFileChannelIndex\"",
									"              ]",
									"            }",
									"          },",
									"          \"fcsFiles\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"panelChannelMappings\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"uniqueChannelOrders\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"shortName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"longName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"normalizedShortNameId\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"fcsFileChannelIndex\": {",
									"                        \"type\": \"integer\"",
									"                      }",
									"                    },",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"shortName\",",
									"                      \"longName\",",
									"                      \"normalizedShortNameId\",",
									"                      \"fcsFileChannelIndex\"",
									"                    ]",
									"                  }",
									"                }",
									"              },",
									"              \"fcsFileToChannelsMap\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {}",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"uniqueChannelOrders\",",
									"              \"fcsFileToChannelsMap\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"channels\",",
									"          \"fcsFiles\",",
									"          \"panelChannelMappings\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"panels\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate panels schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Compensations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"compensation_id\", data.compensations[0].id);",
									"",
									"",
									"// gold standard for compensations?",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"compensations\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sources\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"detectors\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"compensationMatrix\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"number\"",
									"              }",
									"            }",
									"          },",
									"          \"experimentId\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"creationMethodType\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"sources\",",
									"          \"detectors\",",
									"          \"compensationMatrix\",",
									"          \"experimentId\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"creationMethodType\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"compensations\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate compensations schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/compensations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"compensations"
							]
						},
						"description": "List all compensations for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "create FlowSOM(blank name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Failed to create FlowSOM analysis -- (param is missing or the value is empty: name)\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"name\": \"\"\n} "
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								""
							]
						},
						"description": "create a new citrus task without name"
					},
					"response": []
				},
				{
					"name": "create FlowSOM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"child_flowsom_id\", data.flowsom.id);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"flowsom\": {",
									"            \"$id\": \"#/properties/flowsom\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/id\"",
									"                },",
									"                \"name\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/name\"",
									"                },",
									"                \"type\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/type\"",
									"                },",
									"                \"author\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/author\"",
									"                },",
									"                \"status\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/status\"",
									"                },",
									"                \"sourceExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/sourceExperiment\"",
									"                },",
									"                \"createdExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdExperiment\"",
									"                },",
									"                \"attachment_id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/attachment_id\"",
									"                },",
									"                \"canceled\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/canceled\"",
									"                },",
									"                \"completed\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/completed\"",
									"                },",
									"                \"results\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/results\"",
									"                },",
									"                \"settings\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/settings\",",
									"                    \"properties\": {",
									"                        \"attachmentId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/attachmentId\"",
									"                        },",
									"                        \"autoSeed\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/autoSeed\"",
									"                        },",
									"                        \"channelsToPlot\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/channelsToPlot\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/channelsToPlot/items\"",
									"                            }",
									"                        },",
									"                        \"clusteringChannels\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringChannels\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringChannels/items\"",
									"                            }",
									"                        },",
									"                        \"clusteringMethod\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringMethod\"",
									"                        },",
									"                        \"clusterSizeType\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/clusterSizeType\"",
									"                        },",
									"                        \"compensationId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/compensationId\"",
									"                        },",
									"                        \"desiredEventsPerFile\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/desiredEventsPerFile\"",
									"                        },",
									"                        \"desiredTotalEvents\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/desiredTotalEvents\"",
									"                        },",
									"                        \"eventSamplingMethod\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/eventSamplingMethod\"",
									"                        },",
									"                        \"expectedClusters\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/expectedClusters\"",
									"                        },",
									"                        \"expectedMetaclusters\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/expectedMetaclusters\"",
									"                        },",
									"                        \"externalSOMAnalysisId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/externalSOMAnalysisId\"",
									"                        },",
									"                        \"externalSOMAnalysisInfo\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/externalSOMAnalysisInfo\"",
									"                        },",
									"                        \"fcsFileIds\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/fcsFileIds\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/fcsFileIds/items\"",
									"                            }",
									"                        },",
									"                        \"finalResult\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/finalResult\"",
									"                        },",
									"                        \"fixedClusterSize\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/fixedClusterSize\"",
									"                        },",
									"                        \"gateSetId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetId\"",
									"                        },",
									"                        \"gateSetNamesToLabel\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetNamesToLabel\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetNamesToLabel/items\"",
									"                            }",
									"                        },",
									"                        \"iterations\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/iterations\"",
									"                        },",
									"                        \"maxRelativeClusterSize\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/maxRelativeClusterSize\"",
									"                        },",
									"                        \"normalizeScales\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/normalizeScales\"",
									"                        },",
									"                        \"numEventsToActuallySample\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/numEventsToActuallySample\"",
									"                        },",
									"                        \"numFcsFiles\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/numFcsFiles\"",
									"                        },",
									"                        \"outputFileType\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/outputFileType\"",
									"                        },",
									"                        \"randomSeed\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/randomSeed\"",
									"                        },",
									"                        \"showBackgroundOnChannelColoredMSTs\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnChannelColoredMSTs\"",
									"                        },",
									"                        \"showBackgroundOnLegend\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnLegend\"",
									"                        },",
									"                        \"showBackgroundOnPopulationPies\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnPopulationPies\"",
									"                        },",
									"                        \"SOMCreationMethod\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/SOMCreationMethod\"",
									"                        },",
									"                        \"status\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/status\"",
									"                        }",
									"                    }",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/updatedAt\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate create flowsom schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"name\": \"FlowSOMDemoForImport\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom"
							]
						},
						"description": "create a new citrus task"
					},
					"response": []
				},
				{
					"name": "update FlowSOM fractional iterations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Setting 'iterations' must be set to an integer value\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100.9,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM iterations > 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Setting 'iterations' must be between 1 and 100.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 110,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM hclust clusteringMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ],",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"required\": [",
									"            \"attachmentId\",",
									"            \"autoSeed\",",
									"            \"channelsToPlot\",",
									"            \"clusteringChannels\",",
									"            \"clusteringMethod\",",
									"            \"clusterSizeType\",",
									"            \"compensationId\",",
									"            \"desiredEventsPerFile\",",
									"            \"desiredTotalEvents\",",
									"            \"eventSamplingMethod\",",
									"            \"expectedClusters\",",
									"            \"expectedMetaclusters\",",
									"            \"externalSOMAnalysisId\",",
									"            \"externalSOMAnalysisInfo\",",
									"            \"fcsFileIds\",",
									"            \"finalResult\",",
									"            \"fixedClusterSize\",",
									"            \"gateSetId\",",
									"            \"gateSetNamesToLabel\",",
									"            \"iterations\",",
									"            \"maxRelativeClusterSize\",",
									"            \"normalizeScales\",",
									"            \"numEventsToActuallySample\",",
									"            \"numFcsFiles\",",
									"            \"outputFileType\",",
									"            \"randomSeed\",",
									"            \"showBackgroundOnChannelColoredMSTs\",",
									"            \"showBackgroundOnLegend\",",
									"            \"showBackgroundOnPopulationPies\",",
									"            \"SOMCreationMethod\",",
									"            \"status\"",
									"          ],",
									"          \"properties\": {",
									"            \"attachmentId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"autoSeed\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"channelsToPlot\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"clusteringMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"clusterSizeType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredEventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredTotalEvents\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"expectedClusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"expectedMetaclusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"externalSOMAnalysisId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"externalSOMAnalysisInfo\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fcsFileIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fixedClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetNamesToLabel\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"iterations\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"maxRelativeClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"numEventsToActuallySample\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"numFcsFiles\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"outputFileType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"randomSeed\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"showBackgroundOnChannelColoredMSTs\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnLegend\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnPopulationPies\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"SOMCreationMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            }",
									"          }",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate flowsom update schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM no output channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error matches string\"] = responseBody.has(\"Please select at least two Clustering channels.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n\t\"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"relative\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM with no clusterSizeType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error matches string\"] = responseBody.has(\"Setting 'clusterSizeType' must be set to one of the following\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n\t\"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM fixedClusterSize null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'fixedClusterSize' must be between 1 and 40.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": null,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "Update FlowSOM fractional fixedClusterSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'fixedClusterSize' must be set to an integer value.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 1.1,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update FlowSOM maxRelativeClusterSize & FixedClusterSize null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified for fixedClusterSize\"] = responseBody.has(\"Setting 'fixedClusterSize' must be between 1 and 40.\");",
									"",
									"tests[\"Error Verified for maxRelativeClusterSize\"] = responseBody.has(\"Setting 'maxRelativeClusterSize' must be between 2 and 40.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"both\",\r\n    \"fixedClusterSize\": null,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": null,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "Update FlowSOM fractional maxRelativeClusterSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'maxRelativeClusterSize' must be set to an integer value.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 4,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 40.1,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update FlowSOM outputFileType exe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'outputFileType' must be set to one of the following\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"exe\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM outputFileType blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'outputFileType' must be set to one of the following\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM showBackgroundOnLegend null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'showBackgroundOnLegend' must be set to true or false.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": null,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM showBackgroundOnChannelColoredMSTs null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'showBackgroundOnChannelColoredMSTs' must be set to true or false.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": null,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM showBackgroundOnPopulationPies null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Error Verified\"] = responseBody.has(\"Setting 'showBackgroundOnPopulationPies' must be set to true or false.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 100,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": null\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM kmeans clustering Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ],",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"required\": [",
									"            \"attachmentId\",",
									"            \"autoSeed\",",
									"            \"channelsToPlot\",",
									"            \"clusteringChannels\",",
									"            \"clusteringMethod\",",
									"            \"clusterSizeType\",",
									"            \"compensationId\",",
									"            \"desiredEventsPerFile\",",
									"            \"desiredTotalEvents\",",
									"            \"eventSamplingMethod\",",
									"            \"expectedClusters\",",
									"            \"expectedMetaclusters\",",
									"            \"externalSOMAnalysisId\",",
									"            \"externalSOMAnalysisInfo\",",
									"            \"fcsFileIds\",",
									"            \"finalResult\",",
									"            \"fixedClusterSize\",",
									"            \"gateSetId\",",
									"            \"gateSetNamesToLabel\",",
									"            \"iterations\",",
									"            \"maxRelativeClusterSize\",",
									"            \"normalizeScales\",",
									"            \"numEventsToActuallySample\",",
									"            \"numFcsFiles\",",
									"            \"outputFileType\",",
									"            \"randomSeed\",",
									"            \"showBackgroundOnChannelColoredMSTs\",",
									"            \"showBackgroundOnLegend\",",
									"            \"showBackgroundOnPopulationPies\",",
									"            \"SOMCreationMethod\",",
									"            \"status\"",
									"          ],",
									"          \"properties\": {",
									"            \"attachmentId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"autoSeed\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"channelsToPlot\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"clusteringMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"clusterSizeType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredEventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredTotalEvents\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"expectedClusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"expectedMetaclusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"externalSOMAnalysisId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"externalSOMAnalysisInfo\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fcsFileIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fixedClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetNamesToLabel\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"iterations\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"maxRelativeClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"numEventsToActuallySample\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"numFcsFiles\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"outputFileType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"randomSeed\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"showBackgroundOnChannelColoredMSTs\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnLegend\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnPopulationPies\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"SOMCreationMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            }",
									"          }",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate flowsom update schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 10,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM no channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Please select at least two Clustering channels.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM invalid channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Clustering channels parameter has invalid id(s)\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [-100, -200],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings with invalid clustering channels."
					},
					"response": []
				},
				{
					"name": "update FlowSOM two channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ],",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"required\": [",
									"            \"attachmentId\",",
									"            \"autoSeed\",",
									"            \"channelsToPlot\",",
									"            \"clusteringChannels\",",
									"            \"clusteringMethod\",",
									"            \"clusterSizeType\",",
									"            \"compensationId\",",
									"            \"desiredEventsPerFile\",",
									"            \"desiredTotalEvents\",",
									"            \"eventSamplingMethod\",",
									"            \"expectedClusters\",",
									"            \"expectedMetaclusters\",",
									"            \"externalSOMAnalysisId\",",
									"            \"externalSOMAnalysisInfo\",",
									"            \"fcsFileIds\",",
									"            \"finalResult\",",
									"            \"fixedClusterSize\",",
									"            \"gateSetId\",",
									"            \"gateSetNamesToLabel\",",
									"            \"iterations\",",
									"            \"maxRelativeClusterSize\",",
									"            \"normalizeScales\",",
									"            \"numEventsToActuallySample\",",
									"            \"numFcsFiles\",",
									"            \"outputFileType\",",
									"            \"randomSeed\",",
									"            \"showBackgroundOnChannelColoredMSTs\",",
									"            \"showBackgroundOnLegend\",",
									"            \"showBackgroundOnPopulationPies\",",
									"            \"SOMCreationMethod\",",
									"            \"status\"",
									"          ],",
									"          \"properties\": {",
									"            \"attachmentId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"autoSeed\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"channelsToPlot\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"clusteringMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"clusterSizeType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredEventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredTotalEvents\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"expectedClusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"expectedMetaclusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"externalSOMAnalysisId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"externalSOMAnalysisInfo\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fcsFileIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fixedClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetNamesToLabel\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"iterations\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"maxRelativeClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"numEventsToActuallySample\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"numFcsFiles\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"outputFileType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"randomSeed\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"showBackgroundOnChannelColoredMSTs\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnLegend\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnPopulationPies\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"SOMCreationMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            }",
									"          }",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate flowsom update schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings with two clustering channels."
					},
					"response": []
				},
				{
					"name": "update FlowSOM two same channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Duplicate Clustering channels detected-- please only specify each Clustering channel once.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_1}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings with two same clustering channels."
					},
					"response": []
				},
				{
					"name": "update FlowSOM without compensation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"",
									"tests[\"Body matches error 1\"] = responseBody.has(\"Compensation ID '' is not a valid compensation for this experiment.\");",
									"",
									"",
									"tests[\"Body matches error 2\"] = responseBody.has(\"At least one gate is drawn on a different compensation than the specified Compensation ID ''. In order to run advanced analyses, all gates must be drawn on the same compensation and that compensation must be selected.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": null,\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings without compensation"
					},
					"response": []
				},
				{
					"name": "update FlowSOM expectedClusters < 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Setting 'expectedClusters' must be set to one of the following: [9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 7,\r\n    \"expectedMetaclusters\": 4,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM expectedClusters not a squared number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Setting 'expectedClusters' must be set to one of the following: [9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 15,\r\n    \"expectedMetaclusters\": 4,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM expectedClusters<expectedMetaclusters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Number of expected metaclusters (currently 10) must be less than the number of expected clusters\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 9,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM event sampling equal 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Setting 'desiredEventsPerFile' must be between 15 and 4000000.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"hclust\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 1,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM \"create_new\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ],",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"required\": [",
									"            \"attachmentId\",",
									"            \"autoSeed\",",
									"            \"channelsToPlot\",",
									"            \"clusteringChannels\",",
									"            \"clusteringMethod\",",
									"            \"clusterSizeType\",",
									"            \"compensationId\",",
									"            \"desiredEventsPerFile\",",
									"            \"desiredTotalEvents\",",
									"            \"eventSamplingMethod\",",
									"            \"expectedClusters\",",
									"            \"expectedMetaclusters\",",
									"            \"externalSOMAnalysisId\",",
									"            \"externalSOMAnalysisInfo\",",
									"            \"fcsFileIds\",",
									"            \"finalResult\",",
									"            \"fixedClusterSize\",",
									"            \"gateSetId\",",
									"            \"gateSetNamesToLabel\",",
									"            \"iterations\",",
									"            \"maxRelativeClusterSize\",",
									"            \"normalizeScales\",",
									"            \"numEventsToActuallySample\",",
									"            \"numFcsFiles\",",
									"            \"outputFileType\",",
									"            \"randomSeed\",",
									"            \"showBackgroundOnChannelColoredMSTs\",",
									"            \"showBackgroundOnLegend\",",
									"            \"showBackgroundOnPopulationPies\",",
									"            \"SOMCreationMethod\",",
									"            \"status\"",
									"          ],",
									"          \"properties\": {",
									"            \"attachmentId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"autoSeed\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"channelsToPlot\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"clusteringMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"clusterSizeType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"compensationId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredEventsPerFile\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredTotalEvents\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"expectedClusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"expectedMetaclusters\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"externalSOMAnalysisId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"externalSOMAnalysisInfo\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fcsFileIds\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"finalResult\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fixedClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetNamesToLabel\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"iterations\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"maxRelativeClusterSize\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"numEventsToActuallySample\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"numFcsFiles\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"outputFileType\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"randomSeed\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"showBackgroundOnChannelColoredMSTs\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnLegend\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnPopulationPies\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"SOMCreationMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            }",
									"          }",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate flowsom update schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "run FlowSOM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ],",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"$id\": \"#/properties/flowsom\",",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"$id\": \"#/properties/flowsom/properties/id\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"$id\": \"#/properties/flowsom/properties/name\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"type\": {",
									"          \"$id\": \"#/properties/flowsom/properties/type\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"author\": {",
									"          \"$id\": \"#/properties/flowsom/properties/author\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"status\": {",
									"          \"$id\": \"#/properties/flowsom/properties/status\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"$id\": \"#/properties/flowsom/properties/sourceExperiment\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"$id\": \"#/properties/flowsom/properties/createdExperiment\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"$id\": \"#/properties/flowsom/properties/attachment_id\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"$id\": \"#/properties/flowsom/properties/canceled\",",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"$id\": \"#/properties/flowsom/properties/completed\",",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"$id\": \"#/properties/flowsom/properties/results\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdAt\": {",
									"          \"$id\": \"#/properties/flowsom/properties/createdAt\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"$id\": \"#/properties/flowsom/properties/updatedAt\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate flowsom run schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}",
								"run"
							]
						},
						"description": "run a newly created citrus task"
					},
					"response": []
				},
				{
					"name": "run existing FlowSOM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Analysis has been already submitted to Run\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}",
								"run"
							]
						},
						"description": "run a newly created citrus task"
					},
					"response": []
				},
				{
					"name": "update FlowSOM in pending status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"Could not update parameters.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"consensus\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedMetaclustersMethod\": \"max\",\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 10,\r\n    \"normalizeScales\": true,\r\n    \"numExpectedClusters\": 10,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"create_new\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "status_FlowSOM_run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"function sleep(milliseconds) {",
									"  var start = new Date().getTime();",
									"  for (var i = 0; i < 1e7; i++) {",
									"    if ((new Date().getTime() - start) > milliseconds) {",
									"      break;",
									"    }",
									"  }",
									"}",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.advanced_analyses_status.status !== \"Completed\") {",
									"  sleep(2000);",
									"  postman.setNextRequest(\"status_FlowSOM_run\");",
									"  console.log(\"Will run 'status_FlowSOM_run' once again and current status is: \"+data.advanced_analyses_status.status);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}",
								"status"
							]
						},
						"description": "show citrus task status"
					},
					"response": []
				},
				{
					"name": "show FlowSOMdetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"externalFlowSOMAnalysisId\", data.flowsom.id);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"flowsom\": {",
									"            \"$id\": \"#/properties/flowsom\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/id\"",
									"                },",
									"                \"name\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/name\"",
									"                },",
									"                \"type\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/type\"",
									"                },",
									"                \"author\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/author\"",
									"                },",
									"                \"status\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/status\"",
									"                },",
									"                \"sourceExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/sourceExperiment\"",
									"                },",
									"                \"createdExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdExperiment\"",
									"                },",
									"                \"attachment_id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/attachment_id\"",
									"                },",
									"                \"canceled\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/canceled\"",
									"                },",
									"                \"completed\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/completed\"",
									"                },",
									"                \"results\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/results\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/updatedAt\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate flowsom update schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{child_flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{child_flowsom_id}}"
							]
						},
						"description": "Show a specific flowsom task for an experiment"
					},
					"response": []
				},
				{
					"name": "create another FlowSOM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"flowsom_id\", data.flowsom.id);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"flowsom\": {",
									"            \"$id\": \"#/properties/flowsom\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/id\"",
									"                },",
									"                \"name\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/name\"",
									"                },",
									"                \"type\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/type\"",
									"                },",
									"                \"author\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/author\"",
									"                },",
									"                \"status\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/status\"",
									"                },",
									"                \"sourceExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/sourceExperiment\"",
									"                },",
									"                \"createdExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdExperiment\"",
									"                },",
									"                \"attachment_id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/attachment_id\"",
									"                },",
									"                \"canceled\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/canceled\"",
									"                },",
									"                \"completed\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/completed\"",
									"                },",
									"                \"results\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/results\"",
									"                },",
									"                \"settings\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/settings\",",
									"                    \"properties\": {",
									"                        \"attachmentId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/attachmentId\"",
									"                        },",
									"                        \"autoSeed\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/autoSeed\"",
									"                        },",
									"                        \"channelsToPlot\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/channelsToPlot\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/channelsToPlot/items\"",
									"                            }",
									"                        },",
									"                        \"clusteringChannels\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringChannels\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringChannels/items\"",
									"                            }",
									"                        },",
									"                        \"clusteringMethod\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringMethod\"",
									"                        },",
									"                        \"clusterSizeType\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/clusterSizeType\"",
									"                        },",
									"                        \"compensationId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/compensationId\"",
									"                        },",
									"                        \"desiredEventsPerFile\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/desiredEventsPerFile\"",
									"                        },",
									"                        \"desiredTotalEvents\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/desiredTotalEvents\"",
									"                        },",
									"                        \"eventSamplingMethod\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/eventSamplingMethod\"",
									"                        },",
									"                        \"expectedClusters\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/expectedClusters\"",
									"                        },",
									"                        \"expectedMetaclusters\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/expectedMetaclusters\"",
									"                        },",
									"                        \"externalSOMAnalysisId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/externalSOMAnalysisId\"",
									"                        },",
									"                        \"externalSOMAnalysisInfo\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/externalSOMAnalysisInfo\"",
									"                        },",
									"                        \"fcsFileIds\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/fcsFileIds\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/fcsFileIds/items\"",
									"                            }",
									"                        },",
									"                        \"finalResult\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/finalResult\"",
									"                        },",
									"                        \"fixedClusterSize\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/fixedClusterSize\"",
									"                        },",
									"                        \"gateSetId\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetId\"",
									"                        },",
									"                        \"gateSetNamesToLabel\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetNamesToLabel\",",
									"                            \"items\": {",
									"                                \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetNamesToLabel/items\"",
									"                            }",
									"                        },",
									"                        \"iterations\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/iterations\"",
									"                        },",
									"                        \"maxRelativeClusterSize\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/maxRelativeClusterSize\"",
									"                        },",
									"                        \"normalizeScales\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/normalizeScales\"",
									"                        },",
									"                        \"numEventsToActuallySample\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/numEventsToActuallySample\"",
									"                        },",
									"                        \"numFcsFiles\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/numFcsFiles\"",
									"                        },",
									"                        \"outputFileType\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/outputFileType\"",
									"                        },",
									"                        \"randomSeed\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/randomSeed\"",
									"                        },",
									"                        \"showBackgroundOnChannelColoredMSTs\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnChannelColoredMSTs\"",
									"                        },",
									"                        \"showBackgroundOnLegend\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnLegend\"",
									"                        },",
									"                        \"showBackgroundOnPopulationPies\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnPopulationPies\"",
									"                        },",
									"                        \"SOMCreationMethod\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/SOMCreationMethod\"",
									"                        },",
									"                        \"status\": {",
									"                            \"$id\": \"#/properties/flowsom/properties/settings/properties/status\"",
									"                        }",
									"                    }",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/updatedAt\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate create flowsom schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"name\": \"newFlowSOMDemo\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom"
							]
						},
						"description": "create a new citrus task"
					},
					"response": []
				},
				{
					"name": "update FlowSOM \"import_existing\" no id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"To import a SOM, you must specify the `externalSOMAnalysisId` of the successfully completed FlowSOM analysis you want to import from.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"import_existing\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM \"import_existing\" invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Body matches string\"] = responseBody.has(\"To import a SOM, you must specify the `externalSOMAnalysisId` of the successfully completed FlowSOM analysis you want to import from.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAttachmentId\": \"-1\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"import_existing\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "update FlowSOM \"import_existing\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ],",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"settings\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"author\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"settings\": {",
									"          \"type\": \"object\",",
									"          \"required\": [",
									"            \"attachmentId\",",
									"            \"autoSeed\",",
									"            \"channelsToPlot\",",
									"            \"clusteringChannels\",",
									"            \"clusteringMethod\",",
									"            \"clusterSizeType\",",
									"            \"compensationId\",",
									"            \"desiredEventsPerFile\",",
									"            \"desiredTotalEvents\",",
									"            \"eventSamplingMethod\",",
									"            \"expectedClusters\",",
									"            \"expectedMetaclusters\",",
									"            \"externalSOMAnalysisId\",",
									"            \"externalSOMAnalysisInfo\",",
									"            \"fcsFileIds\",",
									"            \"finalResult\",",
									"            \"fixedClusterSize\",",
									"            \"gateSetId\",",
									"            \"gateSetNamesToLabel\",",
									"            \"iterations\",",
									"            \"maxRelativeClusterSize\",",
									"            \"normalizeScales\",",
									"            \"numEventsToActuallySample\",",
									"            \"numFcsFiles\",",
									"            \"outputFileType\",",
									"            \"randomSeed\",",
									"            \"showBackgroundOnChannelColoredMSTs\",",
									"            \"showBackgroundOnLegend\",",
									"            \"showBackgroundOnPopulationPies\",",
									"            \"SOMCreationMethod\",",
									"            \"status\"",
									"          ],",
									"          \"properties\": {",
									"            \"attachmentId\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"autoSeed\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"channelsToPlot\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"clusteringChannels\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringChannels/items\",",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"clusteringMethod\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/clusteringMethod\",",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"clusterSizeType\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/clusterSizeType\",",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"compensationId\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/compensationId\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredEventsPerFile\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/desiredEventsPerFile\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"desiredTotalEvents\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/desiredTotalEvents\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"eventSamplingMethod\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/eventSamplingMethod\",",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"expectedClusters\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/expectedClusters\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"expectedMetaclusters\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/expectedMetaclusters\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"externalSOMAnalysisId\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/externalSOMAnalysisId\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"externalSOMAnalysisInfo\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/externalSOMAnalysisInfo\",",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fcsFileIds\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/fcsFileIds\",",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"$id\": \"#/properties/flowsom/properties/settings/properties/fcsFileIds/items\",",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"finalResult\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/finalResult\",",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"fixedClusterSize\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/fixedClusterSize\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetId\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetId\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"gateSetNamesToLabel\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetNamesToLabel\",",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"$id\": \"#/properties/flowsom/properties/settings/properties/gateSetNamesToLabel/items\",",
									"                \"type\": \"integer\"",
									"              }",
									"            },",
									"            \"iterations\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/iterations\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"maxRelativeClusterSize\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/maxRelativeClusterSize\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"normalizeScales\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/normalizeScales\",",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"numEventsToActuallySample\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/numEventsToActuallySample\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"numFcsFiles\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/numFcsFiles\",",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"outputFileType\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/outputFileType\",",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"randomSeed\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/randomSeed\",",
									"              \"type\": \"integer\"",
									"            },",
									"            \"showBackgroundOnChannelColoredMSTs\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnChannelColoredMSTs\",",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnLegend\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnLegend\",",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"showBackgroundOnPopulationPies\": {",
									"              \"$id\": \"#/properties/flowsom/properties/settings/properties/showBackgroundOnPopulationPies\",",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"SOMCreationMethod\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\",",
									"              \"pattern\": \"^(.*)$\"",
									"            }",
									"          }",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate flowsom update schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusteringMethod\": \"kmeans\",\r\n    \"compensationId\": {{compensation_id}},\r\n    \"desiredEventsPerFile\": 10000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"expectedClusters\": 100,\r\n    \"expectedMetaclusters\": 10,\r\n    \"externalSOMAnalysisId\": {{externalFlowSOMAnalysisId}},\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"randomSeed\": 1001,\r\n    \"SOMCreationMethod\": \"import_existing\",\r\n    \"channelsToPlot\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"clusterSizeType\": \"fixed\",\r\n    \"fixedClusterSize\": 10,\r\n    \"gateSetNamesToLabel\": [{{population_id_1}}],\r\n    \"maxRelativeClusterSize\": 35,\r\n    \"outputFileType\": \"both\",\r\n    \"showBackgroundOnLegend\": true,\r\n    \"showBackgroundOnChannelColoredMSTs\": true,\r\n    \"showBackgroundOnPopulationPies\": false\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}"
							]
						},
						"description": "update flowsom task settings"
					},
					"response": []
				},
				{
					"name": "run FlowSOM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"flowsom\"",
									"  ],",
									"  \"properties\": {",
									"    \"flowsom\": {",
									"      \"$id\": \"#/properties/flowsom\",",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"type\",",
									"        \"author\",",
									"        \"status\",",
									"        \"sourceExperiment\",",
									"        \"createdExperiment\",",
									"        \"attachment_id\",",
									"        \"canceled\",",
									"        \"completed\",",
									"        \"results\",",
									"        \"createdAt\",",
									"        \"updatedAt\"",
									"      ],",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"$id\": \"#/properties/flowsom/properties/id\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"$id\": \"#/properties/flowsom/properties/name\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"type\": {",
									"          \"$id\": \"#/properties/flowsom/properties/type\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"author\": {",
									"          \"$id\": \"#/properties/flowsom/properties/author\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"status\": {",
									"          \"$id\": \"#/properties/flowsom/properties/status\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"sourceExperiment\": {",
									"          \"$id\": \"#/properties/flowsom/properties/sourceExperiment\",",
									"          \"type\": \"integer\"",
									"        },",
									"        \"createdExperiment\": {",
									"          \"$id\": \"#/properties/flowsom/properties/createdExperiment\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"attachment_id\": {",
									"          \"$id\": \"#/properties/flowsom/properties/attachment_id\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"canceled\": {",
									"          \"$id\": \"#/properties/flowsom/properties/canceled\",",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"completed\": {",
									"          \"$id\": \"#/properties/flowsom/properties/completed\",",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"results\": {",
									"          \"$id\": \"#/properties/flowsom/properties/results\",",
									"          \"type\": \"null\"",
									"        },",
									"        \"createdAt\": {",
									"          \"$id\": \"#/properties/flowsom/properties/createdAt\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"$id\": \"#/properties/flowsom/properties/updatedAt\",",
									"          \"type\": \"string\",",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"tests[\"Validate flowsom run schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}",
								"run"
							]
						},
						"description": "run a newly created citrus task"
					},
					"response": []
				},
				{
					"name": "status_FlowSOM_run_for_import",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"function sleep(milliseconds) {",
									"  var start = new Date().getTime();",
									"  for (var i = 0; i < 1e7; i++) {",
									"    if ((new Date().getTime() - start) > milliseconds) {",
									"      break;",
									"    }",
									"  }",
									"}",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.advanced_analyses_status.status !== \"Completed\") {",
									"  sleep(2000);",
									"  postman.setNextRequest(\"status_FlowSOM_run_for_import\");",
									"  console.log(\"Will run 'status_FlowSOM_run_for_import' once again and current status is: \"+data.advanced_analyses_status.status);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}",
								"status"
							]
						},
						"description": "show citrus task status"
					},
					"response": []
				},
				{
					"name": "rename FlowSOM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n  {\n      \"name\": \"newFlowSOM_11\"\n  }\n"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}",
								"rename"
							]
						},
						"description": "rename a flowsom task"
					},
					"response": []
				},
				{
					"name": "show FlowSOM details after run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"created_flowsom_exp\", data.flowsom.createdExperiment);",
									"postman.setEnvironmentVariable(\"flowsom_attachment_id\", data.flowsom.attachment_id);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"flowsom\": {",
									"            \"$id\": \"#/properties/flowsom\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/id\"",
									"                },",
									"                \"name\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/name\"",
									"                },",
									"                \"type\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/type\"",
									"                },",
									"                \"author\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/author\"",
									"                },",
									"                \"status\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/status\"",
									"                },",
									"                \"sourceExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/sourceExperiment\"",
									"                },",
									"                \"createdExperiment\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdExperiment\"",
									"                },",
									"                \"attachment_id\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/attachment_id\"",
									"                },",
									"                \"canceled\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/canceled\"",
									"                },",
									"                \"completed\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/completed\"",
									"                },",
									"                \"results\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/results\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/flowsom/properties/updatedAt\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate flowsom update schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}"
							]
						},
						"description": "Show a specific flowsom task for an experiment"
					},
					"response": []
				},
				{
					"name": "Show Attachment Details Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"attachment_name\", data.attachment.filename);",
									"postman.setEnvironmentVariable(\"attachment_hash\", data.attachment.uniqueHash);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"attachment\": {",
									"            \"$id\": \"#/properties/attachment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/attachment/properties/id\"",
									"                },",
									"                \"filename\": {",
									"                    \"$id\": \"#/properties/attachment/properties/filename\"",
									"                },",
									"                \"size\": {",
									"                    \"$id\": \"#/properties/attachment/properties/size\"",
									"                },",
									"                \"description\": {",
									"                    \"$id\": \"#/properties/attachment/properties/description\"",
									"                },",
									"                \"type\": {",
									"                    \"$id\": \"#/properties/attachment/properties/type\"",
									"                },",
									"                \"experimentId\": {",
									"                    \"$id\": \"#/properties/attachment/properties/experimentId\"",
									"                },",
									"                \"uploadedById\": {",
									"                    \"$id\": \"#/properties/attachment/properties/uploadedById\"",
									"                },",
									"                \"mimeType\": {",
									"                    \"$id\": \"#/properties/attachment/properties/mimeType\"",
									"                },",
									"                \"md5sum\": {",
									"                    \"$id\": \"#/properties/attachment/properties/md5sum\"",
									"                },",
									"                \"protocolId\": {",
									"                    \"$id\": \"#/properties/attachment/properties/protocolId\"",
									"                },",
									"                \"fcsFileId\": {",
									"                    \"$id\": \"#/properties/attachment/properties/fcsFileId\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/attachment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/attachment/properties/updatedAt\"",
									"                },",
									"                \"analysisId\": {",
									"                    \"$id\": \"#/properties/attachment/properties/analysisId\"",
									"                },",
									"                \"uniqueHash\": {",
									"                    \"$id\": \"#/properties/attachment/properties/uniqueHash\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Validate individual attachment schema\"] = tv4.validate(data, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{created_flowsom_exp}}/attachments/{{flowsom_attachment_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{created_flowsom_exp}}",
								"attachments",
								"{{flowsom_attachment_id}}"
							]
						},
						"description": "Show details of a specific attachment for an experiment."
					},
					"response": []
				},
				{
					"name": "Generate Download URL Attachment Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"pm.environment.set(\"download_single_fcs\", data.downloadUrl);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://qa-titan-api.cytobank.org/api/v1/download/url?experimentId={{created_flowsom_exp}}&hashKey={{attachment_hash}}&fileName={{attachment_name}}&fileType=Attachment",
							"protocol": "https",
							"host": [
								"qa-titan-api",
								"cytobank",
								"org"
							],
							"path": [
								"api",
								"v1",
								"download",
								"url"
							],
							"query": [
								{
									"key": "experimentId",
									"value": "{{created_flowsom_exp}}"
								},
								{
									"key": "hashKey",
									"value": "{{attachment_hash}}"
								},
								{
									"key": "fileName",
									"value": "{{attachment_name}}"
								},
								{
									"key": "fileType",
									"value": "Attachment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Attachment data service Copy 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{download_single_fcs}}",
							"host": [
								"{{download_single_fcs}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "copy_settings FlowSOM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}/copy_settings",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}",
								"copy_settings"
							]
						},
						"description": "create a new citrus task by coping citrus settings from another citrus task. "
					},
					"response": []
				},
				{
					"name": "delete FlowSOM run",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}/advanced_analyses/flowsom/{{flowsom_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}",
								"advanced_analyses",
								"flowsom",
								"{{flowsom_id}}"
							]
						},
						"description": "Delete citrus task for an experiment."
					},
					"response": []
				},
				{
					"name": "Delete Exp Permanently 1 copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_flowsom_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_flowsom_exp_id}}"
							]
						},
						"description": "Delete the experiment Permanently along with all its child eperiments."
					},
					"response": []
				}
			]
		},
		{
			"name": "5. tSNE-CUDA",
			"item": [
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_jwt\", data.user.authToken);",
									"postman.setGlobalVariable(\"user_jwt\", data.user.authToken);",
									"postman.setEnvironmentVariable(\"userid\", data.user.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Response body contains authToken\"] = responseBody.has(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\");",
									"if (data.user.id > 2){",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id - 1);",
									"}else{",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id + 1);",
									"}",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"username\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"location\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"organization\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"twitter\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bio\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"hideEmail\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginIp\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"authToken\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        // \"location\",",
									"        // \"organization\",",
									"        // \"bio\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"principalInvestigatorId\",",
									"        \"hideEmail\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"lastLoginAt\",",
									"        \"lastLoginIp\",",
									"        \"authToken\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"user\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "UTF-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"authenticate"
							]
						}
					},
					"response": [
						{
							"name": "authenticate-user.json",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "charset",
										"value": "UTF-8"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
								},
								"url": {
									"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
									"protocol": "https",
									"host": [
										"{{cyto_server}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "758",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 23 May 2016 05:20:43 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"8864d52516a23f4b44bda1b304617730\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31622400; includeSubDomains; preload",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.769000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"user\":{\"id\":110,\"username\":\"swapnil01\",\"location\":\"Mountain View, CA\",\"organization\":\"Cytobank Inc.\",\"twitter\":\"\",\"bio\":\"\",\"firstName\":\"Swapnil01dev01\",\"lastName\":\"Patne01\",\"email\":\"swapnil+1dev01@cytobank.org\",\"principalInvestigatorId\":null,\"hideEmail\":true,\"createdAt\":\"2016-03-29T12:52:21Z\",\"updatedAt\":\"2016-05-23T05:20:43Z\",\"lastLoginAt\":\"2016-05-13T08:58:05Z\",\"lastLoginIp\":\"49.248.212.18\",\"authToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1NTU2YjM1MzE4MGVjYjcyMDMyM2M2OTlkMjRjZWJkMCIsImV4cCI6MTQ2NDAwOTY0MiwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTEwLCJpYXQiOjE0NjM5ODA4NDIsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ2Mzk4MDg0Miwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.cv_PllzIhwqdKdwFVaoG9ME_PrK1y0qdgQ5Q0MXue44\"}}"
						}
					]
				},
				{
					"name": "List Exps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"for (var i =0; i < data.experiments.length; i++){",
									"    if (data.experiments[i].experimentName == environment.API_MASTER_EXP){",
									"        postman.setEnvironmentVariable(\"experiment_id\", data.experiments[i].id);",
									"        postman.setEnvironmentVariable(\"exp_version\", data.experiments[i].version);",
									"        break;",
									"    }",
									"}",
									"tests[\"Body contains list of experiments\"] = data.experiments.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments"
							]
						},
						"description": "List All experimetns for the user"
					},
					"response": []
				},
				{
					"name": "Clone Experiment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cloned_exp_id\", data.experiment.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Experiment cloned successfully\"] = data !== \"\" && typeof data.experiment === 'object';",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{experiment_id}}/clone",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{experiment_id}}",
								"clone"
							]
						},
						"description": "Clone Experiment for user, provided user has access to clone it, other wise return informative error."
					},
					"response": []
				},
				{
					"name": "Exp Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}"
							]
						},
						"description": "Show experiemnt details for the exp id sent over request."
					},
					"response": []
				},
				{
					"name": "List FCS Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of fcs files\"] = data.fcsFiles.length >= 1;",
									"for (var i=0;i < data.fcsFiles.length; i++)",
									"{",
									"postman.setEnvironmentVariable(\"fcs_file_id_\"+[i], data.fcsFiles[i].id);",
									"}",
									"// postman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_4\", data.fcsFiles[3].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_5\", data.fcsFiles[4].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_6\", data.fcsFiles[5].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_7\", data.fcsFiles[6].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_8\", data.fcsFiles[7].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_9\", data.fcsFiles[8].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_10\", data.fcsFiles[9].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_11\", data.fcsFiles[10].id);",
									"var all_fcs_file_ids = data.fcsFiles[0].id;",
									"for (var i =1; i < data.fcsFiles.length; i++){",
									"    all_fcs_file_ids = (all_fcs_file_ids +\", \"+ data.fcsFiles[i].id);",
									"}",
									"postman.setEnvironmentVariable(\"all_fcs_file_ids\", all_fcs_file_ids);",
									"for (var i = 0; i < data.fcsFiles.length; i++){",
									"    data.fcsFiles[i].id = null;",
									"    data.fcsFiles[i].experimentId = null;",
									"    data.fcsFiles[i].createdAt = null;",
									"    data.fcsFiles[i].updatedAt = null;",
									"    data.fcsFiles[i].experimentName = null;",
									"}",
									"var respBody = JSON.stringify(data);",
									"if (typeof environment.gold_std_pbmc_fcsFilesDetails_ds === 'undefined' || environment.gold_std_pbmc_fcsFilesDetails_ds === \"\"){",
									"    postman.setEnvironmentVariable(\"gold_std_pbmc_fcsFilesDetails_ds\", respBody);",
									"}",
									"// tests[\"Body matches gold standard data\"] = respBody === environment.gold_std_pbmc_fcsFilesDetails;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Populations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"",
									"for (var i =0; i < data.populations.length; i++){",
									"if (data.populations[i].name==environment.population_1){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"else if(data.populations[i].name==environment.population_2){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"}",
									"tests[\"Body contains list of populations\"] = data.populations.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "List Panels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.panels[0].channels.length; i++){",
									"    if (data.panels[0].channels[i].longName.match(\"CD\")){",
									"postman.setEnvironmentVariable(\"panel_id\", data.panels[0].id);",
									"postman.setEnvironmentVariable(\"channel_id_\"+count, data.panels[0].channels[i].normalizedShortNameId);",
									"count++;",
									"//postman.setEnvironmentVariable(\"channel_id_2\", data.panels[0].channels[i].normalizedShortNameId);",
									"    }",
									"}",
									"tests[\"Body contains panels\"] = data.panels.length >= 1;",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"panels\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"channels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"longName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"normalizedShortNameId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"fcsFileChannelIndex\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"shortName\",",
									"                \"longName\",",
									"                \"normalizedShortNameId\",",
									"                \"fcsFileChannelIndex\"",
									"              ]",
									"            }",
									"          },",
									"          \"fcsFiles\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"panelChannelMappings\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"uniqueChannelOrders\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"shortName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"longName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"normalizedShortNameId\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"fcsFileChannelIndex\": {",
									"                        \"type\": \"integer\"",
									"                      }",
									"                    },",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"shortName\",",
									"                      \"longName\",",
									"                      \"normalizedShortNameId\",",
									"                      \"fcsFileChannelIndex\"",
									"                    ]",
									"                  }",
									"                }",
									"              },",
									"              \"fcsFileToChannelsMap\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {}",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"uniqueChannelOrders\",",
									"              \"fcsFileToChannelsMap\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"channels\",",
									"          \"fcsFiles\",",
									"          \"panelChannelMappings\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"panels\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate panels schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Compensations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"compensation_id\", data.compensations[0].id);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"compensations\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sources\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"detectors\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"compensationMatrix\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"number\"",
									"              }",
									"            }",
									"          },",
									"          \"experimentId\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"creationMethodType\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"sources\",",
									"          \"detectors\",",
									"          \"compensationMatrix\",",
									"          \"experimentId\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"creationMethodType\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"compensations\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate compensations schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/compensations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"compensations"
							]
						},
						"description": "List all compensations for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "create tSNE-CUDA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"analysis_id\", data.tsne_cuda.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"API Dim. Reduction Experiment tSNE-CUDA\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_0}}, {{fcs_file_id_1}}, {{fcs_file_id_2}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA autoIterations null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'autoIterations' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": null,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA autoIterations -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'autoIterations' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": -1,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA autoIterations blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'autoIterations' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": \"\",\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA autoLearningRate null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'autoLearningRate' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": null,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA autoLearningRate blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'autoLearningRate' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": \"\",\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA clusteringChannels null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Clustering channels should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": null,\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA clusteringChannels blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please select at least two Clustering channels.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA clusteringChannels -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Clustering channels should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": -1,\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA clusteringChannels 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please select at least two Clustering channels.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}],\r\n    \"collapseOutliers\": false,\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA desiredTotalEvents null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredTotalEvents' must be between 100 and 10000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": null,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA earlyExaggeration null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'earlyExaggeration' must be set to an integer value.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Second error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'earlyExaggeration' must be between 1 and 1000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": null,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA earlyExaggeration -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'earlyExaggeration' must be between 1 and 1000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": -1,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA earlyExaggeration decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'earlyExaggeration' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 1.5,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA eventSamplingMethod null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('[\\\\\"Setting \\'eventSamplingMethod\\' must be set to one of the following: [\\\\\\\\\\\\\"all\\\\\\\\\\\\\", \\\\\\\\\\\\\"equal\\\\\\\\\\\\\", \\\\\\\\\\\\\"proportional\\\\\\\\\\\\\"]');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    // \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": null,\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA desiredEventsPerFile null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredEventsPerFile' must be between 100 and 10000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": null,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA fcsFileIds null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"FCS file ids should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": null,\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA fcsFileIds -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"FCS file ids should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": -1,\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA gateSetId null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'gateSetId' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": null,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA gateSetId -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid gateSetId: -1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": -1,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA gateSetId decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid gateSetId: 1.5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'gateSetId' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 1.5,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA iterations null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'iterations' must be between 250 and 100000.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'iterations' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 0,\r\n    \"iterations\": null,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA iterations -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'iterations' must be between 250 and 100000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 0,\r\n    \"iterations\": -1,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA learningRate null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be between 10 and 10000000.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 0,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": null,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA learningRate 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be between 10 and 10000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 0,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 0,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA normalizeScales null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'normalizeScales' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 0,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": null,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA perplexity null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'perplexity' must be set to an integer value.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'perplexity' must be between 5 and 100.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 0,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": false,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": null\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA perplexity 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'perplexity' must be between 5 and 100.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 0,\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": false,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 0\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA equal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 50000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_0}}, {{fcs_file_id_1}}, {{fcs_file_id_2}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run tSNE-CUDA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}",
								"run"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run tSNE-CUDA again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Analysis has been already submitted to Run.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}",
								"run"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tSNE-CUDA after run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Could not update parameters. Pending task cannot be updated\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoIterations\": false,\r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 50000,\r\n    // \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"iterations\": 1000,\r\n    \"learningRate\": 200,\r\n    // \"maxIterations\": 1000,\r\n    // \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    // \"numNeighbors\": 15,\r\n    \"perplexity\": 50\r\n    // \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show tsne_cuda status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"function sleep(milliseconds) {\r",
									"  var start = new Date().getTime();\r",
									"  for (var i = 0; i < 1e7; i++) {\r",
									"    if ((new Date().getTime() - start) > milliseconds) {\r",
									"      break;\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"if (data.advanced_analyses_status.status !== \"Completed\") {\r",
									"  sleep(2000);\r",
									"  postman.setNextRequest(\"Show tsne_cuda status\");\r",
									"  console.log(\"Will run 'Show tsne_cuda status' once again and current status is: \"+data.advanced_analyses_status.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "list reduction analysis tsne-cuda",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"analysis_id\", data.tsne_cuda[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA"
							]
						}
					},
					"response": []
				},
				{
					"name": "show analysis details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename tSNE-CUDA null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 422\"] = responseCode.code === 422;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Failed to rename analysis, name field is empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}",
								"rename"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename tSNE-CUDA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"API Dim. Reduction Experiment - tSNE-CUDA--renamed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}",
								"rename"
							]
						}
					},
					"response": []
				},
				{
					"name": "copy settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"analysis_id\", data.dim_reduce.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}/copy_settings",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}",
								"copy_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tSNE-CUDA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/tSNE-CUDA/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"tSNE-CUDA",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. opt-SNE",
			"item": [
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_jwt\", data.user.authToken);",
									"postman.setGlobalVariable(\"user_jwt\", data.user.authToken);",
									"postman.setEnvironmentVariable(\"userid\", data.user.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Response body contains authToken\"] = responseBody.has(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\");",
									"if (data.user.id > 2){",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id - 1);",
									"}else{",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id + 1);",
									"}",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"username\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"location\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"organization\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"twitter\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bio\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"hideEmail\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginIp\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"authToken\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        // \"location\",",
									"        // \"organization\",",
									"        // \"bio\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"principalInvestigatorId\",",
									"        \"hideEmail\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"lastLoginAt\",",
									"        \"lastLoginIp\",",
									"        \"authToken\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"user\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "UTF-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"authenticate"
							]
						}
					},
					"response": [
						{
							"name": "authenticate-user.json",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "charset",
										"value": "UTF-8"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
								},
								"url": {
									"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
									"protocol": "https",
									"host": [
										"{{cyto_server}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "758",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 23 May 2016 05:20:43 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"8864d52516a23f4b44bda1b304617730\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31622400; includeSubDomains; preload",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.769000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"user\":{\"id\":110,\"username\":\"swapnil01\",\"location\":\"Mountain View, CA\",\"organization\":\"Cytobank Inc.\",\"twitter\":\"\",\"bio\":\"\",\"firstName\":\"Swapnil01dev01\",\"lastName\":\"Patne01\",\"email\":\"swapnil+1dev01@cytobank.org\",\"principalInvestigatorId\":null,\"hideEmail\":true,\"createdAt\":\"2016-03-29T12:52:21Z\",\"updatedAt\":\"2016-05-23T05:20:43Z\",\"lastLoginAt\":\"2016-05-13T08:58:05Z\",\"lastLoginIp\":\"49.248.212.18\",\"authToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1NTU2YjM1MzE4MGVjYjcyMDMyM2M2OTlkMjRjZWJkMCIsImV4cCI6MTQ2NDAwOTY0MiwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTEwLCJpYXQiOjE0NjM5ODA4NDIsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ2Mzk4MDg0Miwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.cv_PllzIhwqdKdwFVaoG9ME_PrK1y0qdgQ5Q0MXue44\"}}"
						}
					]
				},
				{
					"name": "List Exps Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"for (var i =0; i < data.experiments.length; i++){",
									"    if (data.experiments[i].experimentName == environment.API_MASTER_EXP){",
									"        postman.setEnvironmentVariable(\"experiment_id\", data.experiments[i].id);",
									"        postman.setEnvironmentVariable(\"exp_version\", data.experiments[i].version);",
									"        break;",
									"    }",
									"}",
									"tests[\"Body contains list of experiments\"] = data.experiments.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments"
							]
						},
						"description": "List All experimetns for the user"
					},
					"response": []
				},
				{
					"name": "Clone Experiment Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cloned_exp_id\", data.experiment.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Experiment cloned successfully\"] = data !== \"\" && typeof data.experiment === 'object';",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{experiment_id}}/clone",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{experiment_id}}",
								"clone"
							]
						},
						"description": "Clone Experiment for user, provided user has access to clone it, other wise return informative error."
					},
					"response": []
				},
				{
					"name": "Exp Details Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"experiment\": {",
									"            \"$id\": \"#/properties/experiment\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"$id\": \"#/properties/experiment/properties/id\"",
									"                },",
									"                \"version\": {",
									"                    \"$id\": \"#/properties/experiment/properties/version\"",
									"                },",
									"                \"purpose\": {",
									"                    \"$id\": \"#/properties/experiment/properties/purpose\"",
									"                },",
									"                \"comments\": {",
									"                    \"$id\": \"#/properties/experiment/properties/comments\"",
									"                },",
									"                \"public\": {",
									"                    \"$id\": \"#/properties/experiment/properties/public\"",
									"                },",
									"                \"deleted\": {",
									"                    \"$id\": \"#/properties/experiment/properties/deleted\"",
									"                },",
									"                \"sources\": {",
									"                    \"$id\": \"#/properties/experiment/properties/sources\"",
									"                },",
									"                \"experimentName\": {",
									"                    \"$id\": \"#/properties/experiment/properties/experimentName\"",
									"                },",
									"                \"gateVersion\": {",
									"                    \"$id\": \"#/properties/experiment/properties/gateVersion\"",
									"                },",
									"                \"createdAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdAt\"",
									"                },",
									"                \"updatedAt\": {",
									"                    \"$id\": \"#/properties/experiment/properties/updatedAt\"",
									"                },",
									"                \"primaryResearcherId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/primaryResearcherId\"",
									"                },",
									"                \"principalInvestigatorId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/principalInvestigatorId\"",
									"                },",
									"                \"uploaderId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/uploaderId\"",
									"                },",
									"                \"projectId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/projectId\"",
									"                },",
									"                \"clonedFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/clonedFrom\"",
									"                },",
									"                \"createdFrom\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFrom\"",
									"                },",
									"                \"childType\": {",
									"                    \"$id\": \"#/properties/experiment/properties/childType\"",
									"                },",
									"                \"createdFromUrl\": {",
									"                    \"$id\": \"#/properties/experiment/properties/createdFromUrl\"",
									"                },",
									"                \"publishedReportId\": {",
									"                    \"$id\": \"#/properties/experiment/properties/publishedReportId\"",
									"                }",
									"            }",
									"        }",
									"    }",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}"
							]
						},
						"description": "Show experiemnt details for the exp id sent over request."
					},
					"response": []
				},
				{
					"name": "List FCS Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of fcs files\"] = data.fcsFiles.length >= 1;",
									"for (var i=0;i < data.fcsFiles.length; i++)",
									"{",
									"postman.setEnvironmentVariable(\"fcs_file_id_\"+[i], data.fcsFiles[i].id);",
									"}",
									"// postman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_4\", data.fcsFiles[3].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_5\", data.fcsFiles[4].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_6\", data.fcsFiles[5].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_7\", data.fcsFiles[6].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_8\", data.fcsFiles[7].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_9\", data.fcsFiles[8].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_10\", data.fcsFiles[9].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_11\", data.fcsFiles[10].id);",
									"var all_fcs_file_ids = data.fcsFiles[0].id;",
									"for (var i =1; i < data.fcsFiles.length; i++){",
									"    all_fcs_file_ids = (all_fcs_file_ids +\", \"+ data.fcsFiles[i].id);",
									"}",
									"postman.setEnvironmentVariable(\"all_fcs_file_ids\", all_fcs_file_ids);",
									"for (var i = 0; i < data.fcsFiles.length; i++){",
									"    data.fcsFiles[i].id = null;",
									"    data.fcsFiles[i].experimentId = null;",
									"    data.fcsFiles[i].createdAt = null;",
									"    data.fcsFiles[i].updatedAt = null;",
									"    data.fcsFiles[i].experimentName = null;",
									"}",
									"var respBody = JSON.stringify(data);",
									"if (typeof environment.gold_std_pbmc_fcsFilesDetails_ds === 'undefined' || environment.gold_std_pbmc_fcsFilesDetails_ds === \"\"){",
									"    postman.setEnvironmentVariable(\"gold_std_pbmc_fcsFilesDetails_ds\", respBody);",
									"}",
									"// tests[\"Body matches gold standard data\"] = respBody === environment.gold_std_pbmc_fcsFilesDetails;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Populations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"",
									"for (var i =0; i < data.populations.length; i++){",
									"if (data.populations[i].name==environment.population_1){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"else if(data.populations[i].name==environment.population_2){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"}",
									"tests[\"Body contains list of populations\"] = data.populations.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "List Panels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.panels[0].channels.length; i++){",
									"    if (data.panels[0].channels[i].longName.match(\"CD\")){",
									"postman.setEnvironmentVariable(\"panel_id\", data.panels[0].id);",
									"postman.setEnvironmentVariable(\"channel_id_\"+count, data.panels[0].channels[i].normalizedShortNameId);",
									"count++;",
									"//postman.setEnvironmentVariable(\"channel_id_2\", data.panels[0].channels[i].normalizedShortNameId);",
									"    }",
									"}",
									"tests[\"Body contains panels\"] = data.panels.length >= 1;",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"panels\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"channels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"longName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"normalizedShortNameId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"fcsFileChannelIndex\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"shortName\",",
									"                \"longName\",",
									"                \"normalizedShortNameId\",",
									"                \"fcsFileChannelIndex\"",
									"              ]",
									"            }",
									"          },",
									"          \"fcsFiles\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"panelChannelMappings\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"uniqueChannelOrders\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"shortName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"longName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"normalizedShortNameId\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"fcsFileChannelIndex\": {",
									"                        \"type\": \"integer\"",
									"                      }",
									"                    },",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"shortName\",",
									"                      \"longName\",",
									"                      \"normalizedShortNameId\",",
									"                      \"fcsFileChannelIndex\"",
									"                    ]",
									"                  }",
									"                }",
									"              },",
									"              \"fcsFileToChannelsMap\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {}",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"uniqueChannelOrders\",",
									"              \"fcsFileToChannelsMap\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"channels\",",
									"          \"fcsFiles\",",
									"          \"panelChannelMappings\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"panels\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate panels schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Compensations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"compensation_id\", data.compensations[0].id);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"compensations\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sources\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"detectors\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"compensationMatrix\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"number\"",
									"              }",
									"            }",
									"          },",
									"          \"experimentId\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"creationMethodType\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"sources\",",
									"          \"detectors\",",
									"          \"compensationMatrix\",",
									"          \"experimentId\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"creationMethodType\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"compensations\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate compensations schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/compensations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"compensations"
							]
						},
						"description": "List all compensations for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "list reduction analysis opt-sne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE"
							]
						}
					},
					"response": []
				},
				{
					"name": "create opt-SNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"analysis_id\", data.opt_sne.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"API Dim. Reduction Experiment opt-SNE\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE autoLearningRate null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'autoLearningRate' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": null,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE channels blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please select at least two Clustering channels.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE channels one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please select at least two Clustering channels.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE channels null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Clustering channels should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": null,\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE desiredTotalEvents 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredTotalEvents' must be between 100 and 3000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 0,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE desiredTotalEvents -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredTotalEvents' must be between 100 and 3000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": -1,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE desiredTotalEvents null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredTotalEvents' must be between 100 and 3000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": null,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE desiredEventsPerFile 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredEventsPerFile' must be between 100 and 3000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 0,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE earlyExaggeration 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'earlyExaggeration' must be between 1 and 1000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 0,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE earlyExaggeration decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'earlyExaggeration' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 1.5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE eventSamplingMethod null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('[\\\\\"Setting \\'eventSamplingMethod\\' must be set to one of the following: [\\\\\\\\\\\\\"all\\\\\\\\\\\\\", \\\\\\\\\\\\\"equal\\\\\\\\\\\\\", \\\\\\\\\\\\\"proportional\\\\\\\\\\\\\"]');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE fcsFileIds null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"FCS file ids should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": null,\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE fcsFileIds -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"FCS file ids should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": -1,\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE gateSetId null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'gateSetId' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": null,\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE gateSetId -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid gateSetId: -1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": -1,\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE gateSetId decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid gateSetId: 1.5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'gateSetId' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 10000,\r\n    \"earlyExaggeration\": 5,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 1.5,\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE learningRate 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be between 10 and 10000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 0,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE learningRate decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be between 10 and 10000000.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error2 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 1.5,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE learningRate null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be between 10 and 10000000.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error2 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'learningRate' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": null,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE maxIterations 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'maxIterations' must be between 250 and 10000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": 0,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE maxIterations decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'maxIterations' must be between 250 and 10000.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'maxIterations' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": 1.5,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE maxIterations null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'maxIterations' must be between 250 and 10000.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'maxIterations' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": null,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE normalizeScales null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'normalizeScales' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": 260,\r\n    \"normalizeScales\": null,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE perplexity 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'perplexity' must be between 5 and 100.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": 260,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 0,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE perplexity decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'perplexity' must be between 5 and 100.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error2 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'perplexity' must be set to an integer value.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": 260,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 0.5,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE randomSeed decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"pm.test(\"Error1 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'randomSeed' must be set to an integer value.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error2 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'randomSeed' must be between 1 and 2147483647.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": 260,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 0.5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE randomSeed 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";\r",
									"\r",
									"pm.test(\"Error2 verified\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'randomSeed' must be between 1 and 2147483647.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 100,\r\n    \"maxIterations\": 260,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 0\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update opt-SNE analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"autoLearningRate\": false,\r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"desiredEventsPerFile\": 5000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"earlyExaggeration\": 12,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_0}}, {{fcs_file_id_1}}, {{fcs_file_id_2}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"learningRate\": 200,\r\n    \"maxIterations\": 1000,\r\n    \"normalizeScales\": true,\r\n    \"perplexity\": 50,\r\n    \"randomSeed\": 5\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run opt-SNE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}",
								"run"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "show analysis details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename opt-SNE",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"API Dim. Reduction Experiment - opt-SNE Rename\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}",
								"rename"
							]
						}
					},
					"response": []
				},
				{
					"name": "copy settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"analysis_id\", data.dim_reduce.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}/copy_settings",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}",
								"copy_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete opt-SNE",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/opt-SNE/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"opt-SNE",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. UMAP",
			"item": [
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user_jwt\", data.user.authToken);",
									"postman.setGlobalVariable(\"user_jwt\", data.user.authToken);",
									"postman.setEnvironmentVariable(\"userid\", data.user.id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"tests[\"Response body contains authToken\"] = responseBody.has(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\");",
									"if (data.user.id > 2){",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id - 1);",
									"}else{",
									"    postman.setEnvironmentVariable(\"other_usersid\", data.user.id + 1);",
									"}",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"user\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"username\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"location\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"organization\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"twitter\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bio\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"principalInvestigatorId\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"hideEmail\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"createdAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginAt\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastLoginIp\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"authToken\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        // \"location\",",
									"        // \"organization\",",
									"        // \"bio\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"principalInvestigatorId\",",
									"        \"hideEmail\",",
									"        \"createdAt\",",
									"        \"updatedAt\",",
									"        \"lastLoginAt\",",
									"        \"lastLoginIp\",",
									"        \"authToken\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"user\"",
									"  ]",
									"}",
									"tests[\"Validate authenticate user schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "UTF-8"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"authenticate"
							]
						}
					},
					"response": [
						{
							"name": "authenticate-user.json",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "charset",
										"value": "UTF-8"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user_name}}\",\n    \"password\": \"{{userpassword}}\"\n}"
								},
								"url": {
									"raw": "https://{{cyto_server}}/cytobank/api/v1/authenticate",
									"protocol": "https",
									"host": [
										"{{cyto_server}}"
									],
									"path": [
										"cytobank",
										"api",
										"v1",
										"authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "javascript",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Length",
									"value": "758",
									"name": "Content-Length",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 23 May 2016 05:20:43 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "\"8864d52516a23f4b44bda1b304617730\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31622400; includeSubDomains; preload",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "X-Runtime",
									"value": "0.769000",
									"name": "X-Runtime",
									"description": ""
								},
								{
									"key": "X-UA-Compatible",
									"value": "IE=Edge,chrome=1",
									"name": "X-UA-Compatible",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"user\":{\"id\":110,\"username\":\"swapnil01\",\"location\":\"Mountain View, CA\",\"organization\":\"Cytobank Inc.\",\"twitter\":\"\",\"bio\":\"\",\"firstName\":\"Swapnil01dev01\",\"lastName\":\"Patne01\",\"email\":\"swapnil+1dev01@cytobank.org\",\"principalInvestigatorId\":null,\"hideEmail\":true,\"createdAt\":\"2016-03-29T12:52:21Z\",\"updatedAt\":\"2016-05-23T05:20:43Z\",\"lastLoginAt\":\"2016-05-13T08:58:05Z\",\"lastLoginIp\":\"49.248.212.18\",\"authToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1NTU2YjM1MzE4MGVjYjcyMDMyM2M2OTlkMjRjZWJkMCIsImV4cCI6MTQ2NDAwOTY0MiwiYXVkIjoiY3l0b2JhbmtfYXBpX3YxX3VzZXJzIiwidXNlcl9pZCI6MTEwLCJpYXQiOjE0NjM5ODA4NDIsImlzcyI6Imh0dHBzOi8vZGV2MDEuY3l0b2Jhbmsub3JnLyIsIm5iZiI6MTQ2Mzk4MDg0Miwic3ViIjoiY3l0b2JhbmtfYXBpX3YxIn0.cv_PllzIhwqdKdwFVaoG9ME_PrK1y0qdgQ5Q0MXue44\"}}"
						}
					]
				},
				{
					"name": "List Exps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"for (var i =0; i < data.experiments.length; i++){",
									"    if (data.experiments[i].experimentName == environment.API_MASTER_EXP){",
									"        postman.setEnvironmentVariable(\"experiment_id\", data.experiments[i].id);",
									"        postman.setEnvironmentVariable(\"exp_version\", data.experiments[i].version);",
									"        break;",
									"    }",
									"}",
									"tests[\"Body contains list of experiments\"] = data.experiments.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments"
							]
						},
						"description": "List All experimetns for the user"
					},
					"response": []
				},
				{
					"name": "List FCS Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"tests[\"Body contains list of fcs files\"] = data.fcsFiles.length >= 1;",
									"for (var i=0;i < data.fcsFiles.length; i++)",
									"{",
									"postman.setEnvironmentVariable(\"fcs_file_id_\"+[i], data.fcsFiles[i].id);",
									"}",
									"// postman.setEnvironmentVariable(\"fcs_file_id_1\", data.fcsFiles[0].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_2\", data.fcsFiles[1].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_3\", data.fcsFiles[2].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_4\", data.fcsFiles[3].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_5\", data.fcsFiles[4].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_6\", data.fcsFiles[5].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_7\", data.fcsFiles[6].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_8\", data.fcsFiles[7].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_9\", data.fcsFiles[8].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_10\", data.fcsFiles[9].id);",
									"// postman.setEnvironmentVariable(\"fcs_file_id_11\", data.fcsFiles[10].id);",
									"var all_fcs_file_ids = data.fcsFiles[0].id;",
									"for (var i =1; i < data.fcsFiles.length; i++){",
									"    all_fcs_file_ids = (all_fcs_file_ids +\", \"+ data.fcsFiles[i].id);",
									"}",
									"postman.setEnvironmentVariable(\"all_fcs_file_ids\", all_fcs_file_ids);",
									"for (var i = 0; i < data.fcsFiles.length; i++){",
									"    data.fcsFiles[i].id = null;",
									"    data.fcsFiles[i].experimentId = null;",
									"    data.fcsFiles[i].createdAt = null;",
									"    data.fcsFiles[i].updatedAt = null;",
									"    data.fcsFiles[i].experimentName = null;",
									"}",
									"var respBody = JSON.stringify(data);",
									"if (typeof environment.gold_std_pbmc_fcsFilesDetails_ds === 'undefined' || environment.gold_std_pbmc_fcsFilesDetails_ds === \"\"){",
									"    postman.setEnvironmentVariable(\"gold_std_pbmc_fcsFilesDetails_ds\", respBody);",
									"}",
									"// tests[\"Body matches gold standard data\"] = respBody === environment.gold_std_pbmc_fcsFilesDetails;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/fcs_files",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"fcs_files"
							]
						},
						"description": "List all FCS files for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "List Populations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"",
									"for (var i =0; i < data.populations.length; i++){",
									"if (data.populations[i].name==environment.population_1){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"else if(data.populations[i].name==environment.population_2){",
									"postman.setEnvironmentVariable(\"population_id_1\", data.populations[i].gateSetId);",
									"}",
									"}",
									"tests[\"Body contains list of populations\"] = data.populations.length >= 1;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/populations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"populations"
							]
						},
						"description": "List populations for an experiment"
					},
					"response": []
				},
				{
					"name": "List Panels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"var data = JSON.parse(responseBody);",
									"var count = 1;",
									"for (var i =0; i < data.panels[0].channels.length; i++){",
									"    if (data.panels[0].channels[i].longName.match(\"CD\")){",
									"postman.setEnvironmentVariable(\"panel_id\", data.panels[0].id);",
									"postman.setEnvironmentVariable(\"channel_id_\"+count, data.panels[0].channels[i].normalizedShortNameId);",
									"count++;",
									"//postman.setEnvironmentVariable(\"channel_id_2\", data.panels[0].channels[i].normalizedShortNameId);",
									"    }",
									"}",
									"tests[\"Body contains panels\"] = data.panels.length >= 1;",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"panels\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"channels\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"longName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"normalizedShortNameId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"fcsFileChannelIndex\": {",
									"                  \"type\": \"integer\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"shortName\",",
									"                \"longName\",",
									"                \"normalizedShortNameId\",",
									"                \"fcsFileChannelIndex\"",
									"              ]",
									"            }",
									"          },",
									"          \"fcsFiles\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"panelChannelMappings\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"uniqueChannelOrders\": {",
									"                \"type\": \"array\",",
									"                \"items\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                      \"id\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"shortName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"longName\": {",
									"                        \"type\": \"string\"",
									"                      },",
									"                      \"normalizedShortNameId\": {",
									"                        \"type\": \"integer\"",
									"                      },",
									"                      \"fcsFileChannelIndex\": {",
									"                        \"type\": \"integer\"",
									"                      }",
									"                    },",
									"                    \"required\": [",
									"                      \"id\",",
									"                      \"shortName\",",
									"                      \"longName\",",
									"                      \"normalizedShortNameId\",",
									"                      \"fcsFileChannelIndex\"",
									"                    ]",
									"                  }",
									"                }",
									"              },",
									"              \"fcsFileToChannelsMap\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {}",
									"              }",
									"            },",
									"            \"required\": [",
									"              \"uniqueChannelOrders\",",
									"              \"fcsFileToChannelsMap\"",
									"            ]",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"channels\",",
									"          \"fcsFiles\",",
									"          \"panelChannelMappings\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"panels\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate panels schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/panels",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"panels"
							]
						},
						"description": "List panels for an experiment"
					},
					"response": []
				},
				{
					"name": "List Compensations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";",
									"",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"compensation_id\", data.compensations[0].id);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"compensations\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"sources\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"detectors\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"name\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"id\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"shortName\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"name\",",
									"                \"id\",",
									"                \"shortName\"",
									"              ]",
									"            }",
									"          },",
									"          \"compensationMatrix\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"              \"type\": \"array\",",
									"              \"items\": {",
									"                \"type\": \"number\"",
									"              }",
									"            }",
									"          },",
									"          \"experimentId\": {",
									"            \"type\": \"integer\"",
									"          },",
									"          \"createdAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"updatedAt\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"creationMethodType\": {",
									"            \"type\": \"integer\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"id\",",
									"          \"name\",",
									"          \"sources\",",
									"          \"detectors\",",
									"          \"compensationMatrix\",",
									"          \"experimentId\",",
									"          \"createdAt\",",
									"          \"updatedAt\",",
									"          \"creationMethodType\"",
									"        ]",
									"      }",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"compensations\"",
									"  ]",
									"}",
									"",
									"tests[\"Validate compensations schema\"] = tv4.validate(data, schema);",
									"console.log(tv4.error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/compensations",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"compensations"
							]
						},
						"description": "List all compensations for the given experiment id for the user."
					},
					"response": []
				},
				{
					"name": "list reduction analysis umap",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"HSTS header is present\"] = postman.getResponseHeader(\"Strict-Transport-Security\") === \"max-age=31622400; includeSubDomains; preload\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP"
							]
						}
					},
					"response": []
				},
				{
					"name": "create UMAP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"analysis_id\", data.umap.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"API Dim. Reduction Experiment UMAP\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP no channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Clustering channels should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": null,\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.5,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP one channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please select at least two Clustering channels.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [-1],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP collapseOutliers 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'collapseOutliers' must be set to true or false.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": 0,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP desiredEventsPerFile -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredEventsPerFile' must be between 100 and 10000000.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": -1,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP desiredTotalEvents -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'desiredTotalEvents' must be between 100 and 10000000\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": -1,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP fcs null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"FCS file ids should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": null,\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP gateSetId -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid gateSetId: -1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"all\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": -1,\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP fcs null sampling all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"FCS file ids should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"all\",\r\n    \"fcsFileIds\": null,\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP fcs null sampling equal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"FCS file ids should be specified as an array.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": null,\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP invalid gateSetId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'gateSetId' must be set to an integer value.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid gateSetId: 1.1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": 1.1,\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP numNeighbors -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'numNeighbors' must be between 2 and 100.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": true,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": -1\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP numNeighbors float",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Setting 'numNeighbors' must be set to an integer value.\", \"Setting 'numNeighbors' must be between 2 and 100.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": true,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_1}}, {{fcs_file_id_2}}, {{fcs_file_id_3}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 0.1\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP analysis equal",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"equal\",\r\n    \"fcsFileIds\": [{{fcs_file_id_0}}, {{fcs_file_id_1}}, {{fcs_file_id_2}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP analysis all",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"all\",\r\n    \"fcsFileIds\": [{{fcs_file_id_0}}, {{fcs_file_id_1}}, {{fcs_file_id_2}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update UMAP analysis proportional",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"options\":\r\n  { \r\n    \"clusteringChannels\": [{{channel_id_1}}, {{channel_id_2}}, {{channel_id_3}}, {{channel_id_4}}],\r\n    \"collapseOutliers\": false,\r\n    \"desiredEventsPerFile\": 50000,\r\n    \"desiredTotalEvents\": 100000,\r\n    \"eventSamplingMethod\": \"proportional\",\r\n    \"fcsFileIds\": [{{fcs_file_id_0}}, {{fcs_file_id_1}}, {{fcs_file_id_2}}],\r\n    \"gateSetId\": {{population_id_1}},\r\n    \"minDistance\": 0.1,\r\n    \"normalizeScales\": true,\r\n    \"numNeighbors\": 15\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run UMAP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}/run",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}",
								"run"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}/status",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "show analysis details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename UMAP",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"API Dim. Reduction Experiment - UMAP Rename\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}/rename",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}",
								"rename"
							]
						}
					},
					"response": []
				},
				{
					"name": "copy settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"analysis_id\", data.dim_reduce.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}/copy_settings",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}",
								"copy_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete UMAP",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{cyto_server}}/cytobank/api/v1/experiments/{{cloned_exp_id}}/advanced_analyses/UMAP/{{analysis_id}}",
							"protocol": "https",
							"host": [
								"{{cyto_server}}"
							],
							"path": [
								"cytobank",
								"api",
								"v1",
								"experiments",
								"{{cloned_exp_id}}",
								"advanced_analyses",
								"UMAP",
								"{{analysis_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}